<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ss-tproxy 透明代理的设置方法</title>
    <link href="/2023/02/16/ssTproxyTransparentAgent/"/>
    <url>/2023/02/16/ssTproxyTransparentAgent/</url>
    
    <content type="html"><![CDATA[<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><h2 id="1、什么是透明代理"><a href="#1、什么是透明代理" class="headerlink" title="1、什么是透明代理"></a>1、什么是透明代理</h2><p>在正向代理中，一个软件如果想走 client 的代理服务，我们必须显式配置该软件，对该软件来说，有没有走代理是很明确的，大家都“心知肚明”。而透明代理则与正向代理相反，当我们设置好合适的防火墙规则（仅以 Linux 的 iptables 为例），我们将不再需要显式配置这些软件来让其经过代理或者不经过代理（直连），因为这些软件发出的流量会自动被 iptables 规则所处理，那些我们认为需要代理的流量，会被通过合适的方法发送到 client 进程，而那些我们不需要代理的流量，则直接放行（直连）。这个过程对于我们使用的软件来说是完全透明的，软件自身对其一无所知。这就叫做 <strong>透明代理</strong>。注意，所谓透明是对我们使用的软件透明，而非对 client、server 或目标网站透明，理解这一点非常重要。</p><h2 id="2、透明代理的工作原理"><a href="#2、透明代理的工作原理" class="headerlink" title="2、透明代理的工作原理"></a>2、透明代理的工作原理</h2><p>在正向代理中，期望使用代理的软件会通过 http、socks5 协议与 client 进程进行交互，以此完成代理操作。而在透明代理中，我们的软件发出的流量是完全正常的流量，并没有像正向代理那样，使用 http、socks5 等专用协议，这些流量经过 iptables 规则的处理后，会被通过“合适的方法”发送给 client 进程（当然是指那些我们认为需要走代理的流量）。注意，此时 client 进程接收到不再是 http、socks5 协议数据，而是经过 iptables 处理的“透明代理数据”，“透明代理数据”从本质上来说与正常数据没有区别，只是多了一些“元数据”在里面，使得 client 进程可以通过 netfilter 或操作系统提供的 API 接口来获取这些元数据（元数据其实就是原始目的地址和原始目的端口）。那么这个“合适的方法”是什么？目前来说有两种：</p><ul><li>REDIRECT：只支持 TCP 协议的透明代理。</li><li>TPROXY：支持 TCP 和 UDP 协议的透明代理。</li></ul><p>因此，对于 TCP 透明代理，有两种实现方式，一种是 REDIRECT，一种是 TPROXY；而对于 UDP 透明代理，只能通过 TPROXY 方式来实现。为方便叙述，本文以 <strong>纯 TPROXY 模式</strong> 指代 TCP 和 UDP 都使用 TPROXY 来实现，以 <strong>REDIRECT + TPROXY 模式</strong> 指代 TCP 使用 REDIRECT 实现，而 UDP 使用 TPROXY 来实现，有时候简称 <strong>REDIRECT 模式</strong>，它们都是一个意思。</p><h1 id="二、Openvpn流量转发"><a href="#二、Openvpn流量转发" class="headerlink" title="二、Openvpn流量转发"></a>二、Openvpn流量转发</h1><p>采用：<a href="https://github.com/zfl9/ss-tproxy">https://github.com/zfl9/ss-tproxy</a><br>原理：openvpn → iptables → ss-redir</p><h1 id="三、部署方式"><a href="#三、部署方式" class="headerlink" title="三、部署方式"></a>三、部署方式</h1><h2 id="1、依赖检查"><a href="#1、依赖检查" class="headerlink" title="1、依赖检查"></a>1、依赖检查</h2><p>在部署之前，需要检查下当前自己的服务器依赖是否完整：<br>依赖安装地址：<a href="https://github.com/zfl9/ss-tproxy/wiki/Linux-%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86#%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96">https://github.com/zfl9/ss-tproxy/wiki/Linux-%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86#%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96</a></p><h2 id="2、脚本安装"><a href="#2、脚本安装" class="headerlink" title="2、脚本安装"></a>2、脚本安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https:``//github.com/zfl9/ss-tproxy<br><span class="hljs-built_in">cd</span> ss-tproxy<br><span class="hljs-built_in">chmod</span> +x ss-tproxy<br></code></pre></td></tr></table></figure><h3 id="install-可用的情况下（推荐）"><a href="#install-可用的情况下（推荐）" class="headerlink" title="install 可用的情况下（推荐）"></a>install 可用的情况下（推荐）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">install ss-tproxy /usr/local/bin<br>install -d /etc/ss-tproxy<br>install -m` `644` `ss-tproxy.conf gfwlist* chnroute* ignlist* /etc/ss-tproxy<br>install -m` `644` `ss-tproxy.service /etc/systemd/system <span class="hljs-comment"># 可选，安装 service 文件</span><br></code></pre></td></tr></table></figure><h3 id="install-不可用"><a href="#install-不可用" class="headerlink" title="install 不可用"></a>install 不可用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> -af ss-tproxy /usr/local/bin<br><span class="hljs-built_in">mkdir</span> -p /etc/ss-tproxy<br><span class="hljs-built_in">cp</span> -af ss-tproxy.conf gfwlist* chnroute* ignlist* /etc/ss-tproxy<br><span class="hljs-built_in">cp</span> -af ss-tproxy.service /etc/systemd/system <span class="hljs-comment"># 可选，安装 service 文件</span><br></code></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs bash">**/etc/ss-tproxy/ss-tproxy.conf**<br><br><span class="hljs-comment">## mode</span><br><span class="hljs-comment">#mode=&#x27;global&#x27;  # global 模式 (不分流)</span><br>mode=<span class="hljs-string">&#x27;gfwlist&#x27;</span> <span class="hljs-comment"># gfwlist 模式 (黑名单)</span><br><span class="hljs-comment">#mode=&#x27;chnroute&#x27; # chnroute 模式 (白名单)</span><br> <br><span class="hljs-comment">## ipv4/6</span><br>ipv4=<span class="hljs-string">&#x27;true&#x27;</span>     <span class="hljs-comment"># true:启用ipv4透明代理; false:关闭ipv4透明代理</span><br>ipv6=<span class="hljs-string">&#x27;false&#x27;</span>    <span class="hljs-comment"># true:启用ipv6透明代理; false:关闭ipv6透明代理</span><br> <br><span class="hljs-comment">## tproxy</span><br>tproxy=<span class="hljs-string">&#x27;false&#x27;</span>  <span class="hljs-comment"># true:TPROXY+TPROXY; false:REDIRECT+TPROXY</span><br> <br><span class="hljs-comment">## tcponly</span><br>tcponly=<span class="hljs-string">&#x27;false&#x27;</span> <span class="hljs-comment"># true:仅代理TCP流量; false:代理TCP和UDP流量</span><br> <br><span class="hljs-comment">## selfonly</span><br>selfonly=<span class="hljs-string">&#x27;false&#x27;</span> <span class="hljs-comment"># true:仅代理本机流量; false:代理本机及&quot;内网&quot;流量</span><br> <br><span class="hljs-comment">## proxy</span><br><span class="hljs-comment"># user/group(#1,推荐) vs svraddr+port(#2), user/group选其中一个填写(不建议都填)</span><br>proxy_procuser=<span class="hljs-string">&#x27;proxy&#x27;</span>   <span class="hljs-comment"># 本机代理进程的 user/uid，用来放行本机代理进程传出的流量</span><br>proxy_procgroup=<span class="hljs-string">&#x27;&#x27;</span>       <span class="hljs-comment"># 本机代理进程的 group/gid，用来放行本机代理进程传出的流量</span><br>proxy_svraddr4=()        <span class="hljs-comment"># 服务器的 IPv4 地址或域名，允许填写多个服务器地址，空格隔开</span><br>proxy_svraddr6=()        <span class="hljs-comment"># 服务器的 IPv6 地址或域名，允许填写多个服务器地址，空格隔开</span><br>proxy_svrport=<span class="hljs-string">&#x27;&#x27;</span>         <span class="hljs-comment"># 服务器的监听端口，可填多个端口，格式同 ipts_proxy_dst_port</span><br>proxy_tcpport=<span class="hljs-string">&#x27;12121&#x27;</span>    <span class="hljs-comment"># ss/ssr/v2ray 等本机进程的 TCP 监听端口，该端口支持透明代理</span><br>proxy_udpport=<span class="hljs-string">&#x27;12121&#x27;</span>    <span class="hljs-comment"># ss/ssr/v2ray 等本机进程的 UDP 监听端口，该端口支持透明代理</span><br>proxy_startcmd=<span class="hljs-string">&#x27;(ss-redir -c /etc/shadowsocks-libev/config.json -u &lt;/dev/null &amp;&gt;&gt;/var/log/ss-redir.log &amp;)&#x27;</span>     <span class="hljs-comment"># 用于启动本机代理进程的 shell 命令，该命令应该能立即执行完毕</span><br>proxy_stopcmd=<span class="hljs-string">&#x27;kill -9 $(pidof ss-redir)&#x27;</span>      <span class="hljs-comment"># 用于关闭本机代理进程的 shell 命令，该命令应该能立即执行完毕</span><br> <br><span class="hljs-comment">## dns</span><br>dns_direct=<span class="hljs-string">&#x27;223.5.5.5&#x27;</span>                <span class="hljs-comment"># 本地 IPv4 DNS，不能指定端口，也可以填组织、公司内部 DNS</span><br>dns_direct6=<span class="hljs-string">&#x27;240C::6666&#x27;</span>              <span class="hljs-comment"># 本地 IPv6 DNS，不能指定端口，也可以填组织、公司内部 DNS</span><br>dns_remote=<span class="hljs-string">&#x27;8.8.8.8#53&#x27;</span>               <span class="hljs-comment"># 远程 IPv4 DNS，必须指定端口，提示：访问远程 DNS 会走代理</span><br>dns_remote6=<span class="hljs-string">&#x27;2001:4860:4860::8888#53&#x27;</span> <span class="hljs-comment"># 远程 IPv6 DNS，必须指定端口，提示：访问远程 DNS 会走代理</span><br> <br><span class="hljs-comment">## dnsmasq</span><br>dnsmasq_bind_port=<span class="hljs-string">&#x27;53&#x27;</span>                  <span class="hljs-comment"># dnsmasq 服务器监听端口，见 README</span><br>dnsmasq_cache_size=<span class="hljs-string">&#x27;4096&#x27;</span>               <span class="hljs-comment"># DNS 缓存大小，大小为 0 表示禁用缓存</span><br>dnsmasq_cache_time=<span class="hljs-string">&#x27;3600&#x27;</span>               <span class="hljs-comment"># DNS 缓存时间，单位是秒，最大 3600 秒</span><br>dnsmasq_query_maxcnt=<span class="hljs-string">&#x27;1024&#x27;</span>             <span class="hljs-comment"># 设置并发 DNS 查询的最大数量，默认为 150</span><br>dnsmasq_log_enable=<span class="hljs-string">&#x27;false&#x27;</span>              <span class="hljs-comment"># 记录详细日志，除非进行调试，否则不建议启用</span><br>dnsmasq_log_file=<span class="hljs-string">&#x27;/var/log/dnsmasq.log&#x27;</span> <span class="hljs-comment"># 日志文件，如果不想保存日志可以改为 /dev/null</span><br>dnsmasq_conf_dir=()                     <span class="hljs-comment"># `--conf-dir` 选项的参数，可以填多个，空格隔开</span><br>dnsmasq_conf_file=()                    <span class="hljs-comment"># `--conf-file` 选项的参数，可以填多个，空格隔开</span><br>dnsmasq_conf_string=()                  <span class="hljs-comment"># 自定义配置，一个数组元素就是一行配置，空格隔开</span><br> <br><span class="hljs-comment">## chinadns</span><br>chinadns_bind_port=<span class="hljs-string">&#x27;65353&#x27;</span>               <span class="hljs-comment"># chinadns-ng 服务器监听端口，通常不用改动</span><br>chinadns_timeout=<span class="hljs-string">&#x27;5&#x27;</span>                     <span class="hljs-comment"># 等待上游 DNS 返回响应的超时时间，单位为秒</span><br>chinadns_repeat=<span class="hljs-string">&#x27;1&#x27;</span>                      <span class="hljs-comment"># 向可信 DNS 发送几次 DNS 查询请求，默认为 1</span><br>chinadns_fairmode=<span class="hljs-string">&#x27;true&#x27;</span>                 <span class="hljs-comment"># 使用公平模式，具体看 chinadns-ng 的 README</span><br>chinadns_gfwlist_mode=<span class="hljs-string">&#x27;true&#x27;</span>             <span class="hljs-comment"># gfwlist 模式，加载 gfwlist.txt/gfwlist.ext</span><br>chinadns_noip_as_chnip=<span class="hljs-string">&#x27;false&#x27;</span>           <span class="hljs-comment"># 启用 chinadns-ng 的 `--noip-as-chnip` 选项</span><br>chinadns_verbose=<span class="hljs-string">&#x27;false&#x27;</span>                 <span class="hljs-comment"># 记录详细日志，除非进行调试，否则不建议启用</span><br>chinadns_logfile=<span class="hljs-string">&#x27;/var/log/chinadns.log&#x27;</span> <span class="hljs-comment"># 日志文件，如果不想保存日志可以改为 /dev/null</span><br>chinadns_privaddr4=()                    <span class="hljs-comment"># IPv4 私有地址段，多个用空格隔开，具体见 README</span><br>chinadns_privaddr6=()                    <span class="hljs-comment"># IPv6 私有地址段，多个用空格隔开，具体见 README</span><br> <br><span class="hljs-comment">## dns2tcp</span><br>dns2tcp_bind_port=<span class="hljs-string">&#x27;65454&#x27;</span>               <span class="hljs-comment"># dns2tcp 转发服务器监听端口，如有冲突请修改</span><br>dns2tcp_tcp_syncnt=<span class="hljs-string">&#x27;&#x27;</span>                   <span class="hljs-comment"># dns2tcp 的 `-s` 选项，留空表示不设置此选项</span><br>dns2tcp_tcp_quickack=<span class="hljs-string">&#x27;false&#x27;</span>            <span class="hljs-comment"># dns2tcp 的 `-a` 选项，选项取值为true/false</span><br>dns2tcp_tcp_fastopen=<span class="hljs-string">&#x27;false&#x27;</span>            <span class="hljs-comment"># dns2tcp 的 `-f` 选项，选项取值为true/false</span><br>dns2tcp_verbose=<span class="hljs-string">&#x27;false&#x27;</span>                 <span class="hljs-comment"># 记录详细日志，除非进行调试，否则不建议启用</span><br>dns2tcp_logfile=<span class="hljs-string">&#x27;/var/log/dns2tcp.log&#x27;</span>  <span class="hljs-comment"># 日志文件，如果不想保存日志可以改为 /dev/null</span><br> <br><span class="hljs-comment">## ipts</span><br>ipts_if_lo=<span class="hljs-string">&#x27;lo&#x27;</span>                 <span class="hljs-comment"># 环回接口的名称，在标准发行版中，通常为 lo，如果不是请修改</span><br>ipts_rt_tab=<span class="hljs-string">&#x27;233&#x27;</span>               <span class="hljs-comment"># iproute2 路由表名或表 ID，除非产生冲突，否则不建议改动该选项</span><br>ipts_rt_mark=<span class="hljs-string">&#x27;0x2333&#x27;</span>           <span class="hljs-comment"># iproute2 策略路由的防火墙标记，除非产生冲突，否则不建议改动该选项</span><br>ipts_set_snat=<span class="hljs-string">&#x27;true&#x27;</span>           <span class="hljs-comment"># 设置 iptables 的 MASQUERADE 规则，布尔值，`true/false`，详见 README</span><br>ipts_set_snat6=<span class="hljs-string">&#x27;false&#x27;</span>          <span class="hljs-comment"># 设置 ip6tables 的 MASQUERADE 规则，布尔值，`true/false`，详见 README</span><br>ipts_reddns_onstop=<span class="hljs-string">&#x27;true&#x27;</span>       <span class="hljs-comment"># ss-tproxy stop 后，是否将其它主机发至本机的 DNS 重定向至直连 DNS，详见 README</span><br>ipts_proxy_dst_port=<span class="hljs-string">&#x27;1:65535&#x27;</span>   <span class="hljs-comment"># 黑名单 IP 的哪些端口走代理，多个用逗号隔开，冒号为端口范围(含边界)，详见 README</span><br> <br><span class="hljs-comment">## opts</span><br>opts_ss_netstat=<span class="hljs-string">&#x27;auto&#x27;</span>                  <span class="hljs-comment"># auto/ss/netstat，用哪个端口检测工具，见 README</span><br>opts_ping_cmd_to_use=<span class="hljs-string">&#x27;auto&#x27;</span>             <span class="hljs-comment"># auto/standalone/parameter，ping 相关，见 README</span><br>opts_hostname_resolver=<span class="hljs-string">&#x27;auto&#x27;</span>           <span class="hljs-comment"># auto/dig/getent/ping，用哪个解析工具，见 README</span><br>opts_overwrite_resolv=<span class="hljs-string">&#x27;false&#x27;</span>           <span class="hljs-comment"># true/false/留空，如何操作 resolv.conf，见 README</span><br>opts_ip_for_check_net=<span class="hljs-string">&#x27;223.5.5.5&#x27;</span>       <span class="hljs-comment"># 检测外网是否可访问的 IP，ping，留空表示跳过此检查</span><br> <br><span class="hljs-comment">## file</span><br>file_gfwlist_txt=<span class="hljs-string">&#x27;/etc/ss-tproxy/gfwlist.txt&#x27;</span>      <span class="hljs-comment"># gfwlist/chnlist 模式预置文件</span><br>file_gfwlist_ext=<span class="hljs-string">&#x27;/etc/ss-tproxy/gfwlist.ext&#x27;</span>      <span class="hljs-comment"># gfwlist/chnlist 模式扩展文件</span><br>file_ignlist_ext=<span class="hljs-string">&#x27;/etc/ss-tproxy/ignlist.ext&#x27;</span>      <span class="hljs-comment"># global/chnroute 模式扩展文件</span><br>file_chnroute_set=<span class="hljs-string">&#x27;/etc/ss-tproxy/chnroute.set&#x27;</span>    <span class="hljs-comment"># chnroute 地址段文件 (iptables)</span><br>file_chnroute6_set=<span class="hljs-string">&#x27;/etc/ss-tproxy/chnroute6.set&#x27;</span>  <span class="hljs-comment"># chnroute6 地址段文件 (ip6tables)</span><br>file_dnsserver_pid=<span class="hljs-string">&#x27;/etc/ss-tproxy/.dnsserver.pid&#x27;</span> <span class="hljs-comment"># dns 服务器进程的 pid 文件 (shell)</span><br> <br><span class="hljs-comment">## 主要放通下内网的访问，然后把MASQUERADE提前出来，要不然tcp的连接会回不来</span><br><span class="hljs-function"><span class="hljs-title">post_start</span></span>()&#123;<br>iptables -t nat -I PREROUTING -s 10.207.0.0/16 -d 10.0.0.0/8 -j ACCEPT<br>iptables -t nat -I SSTP_POSTROUTING -s 10.207.0.0/16 -j MASQUERADE<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-title">post_stop</span></span>()&#123;<br>iptables -t nat -D PREROUTING -s 10.207.0.0/16 -d 10.0.0.0/8 -j ACCEPT<br>iptables -t nat -D SSTP_POSTROUTING -s 10.207.0.0/16 -j MASQUERADE<br>&#125;<br></code></pre></td></tr></table></figure><p>以下配置需要特别注意，如果不知道如何配置的，那么就按照我这么默认配置即可<br>具体配置介绍：<a href="https://github.com/zfl9/ss-tproxy#%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E">https://github.com/zfl9/ss-tproxy#%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E</a><br>17743<br>17799</p><h2 id="3、设置ss-libev代理"><a href="#3、设置ss-libev代理" class="headerlink" title="3、设置ss-libev代理"></a>3、设置ss-libev代理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#新版本(v4.``6.1``及以上)</span><br><span class="hljs-comment">#第一次运行时，请执行下面这两个操作</span><br><span class="hljs-comment">#``1``.创建proxy用户和组: useradd -Mr -d/tmp -s/bin/bash proxy</span><br><span class="hljs-comment">#``2``.授予透明代理相关权限: setcap cap_net_bind_service,cap_net_admin+ep /path/to/ss-redir</span><br><span class="hljs-comment">#&gt;&gt; 若setcap不可用，可使用suid权限位，此时需配置：proxy_procuser=``&#x27;&#x27;``、proxy_procgroup=``&#x27;proxy&#x27;</span><br><span class="hljs-comment">#&gt;&gt; 将所有者(组)改为root，并授予suid权限：chown root:root /path/to/ss-redir &amp;&amp; chmod` `4755` `/path/to/ss-redir</span><br>proxy_procuser=``<span class="hljs-string">&#x27;proxy&#x27;</span><br><span class="hljs-comment">#proxy_startcmd=``&#x27;su proxy -c&quot;(ss-redir -c /etc/ss.json -u -v &lt;/dev/null &amp;&gt;&gt;/tmp/ss-redir.log &amp;)&quot;&#x27;` `# -v 表示记录详细日志</span><br>proxy_startcmd=``<span class="hljs-string">&#x27;su proxy -c&quot;(ss-redir -c /etc/ss.json -u &lt;/dev/null &amp;&gt;&gt;/tmp/ss-redir.log &amp;)&quot;&#x27;</span>` `<span class="hljs-comment"># 这里就不记录详细日志了</span><br>proxy_stopcmd=``<span class="hljs-string">&#x27;kill -9 $(pidof ss-redir)&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="黑名单、白名单说明"><a href="#黑名单、白名单说明" class="headerlink" title="黑名单、白名单说明"></a>黑名单、白名单说明</h2><ul><li>对于 global 模式，白名单文件为 <code>ignlist.ext</code>，没有黑名单文件，因为默认都走代理。</li><li>对于 gfwlist 模式，黑名单文件为 <code>gfwlist.txt/ext</code>，没有白名单文件，因为其它都走直连。</li><li>对于 chnroute 模式，白名单文件为 <code>ignlist.ext</code>，没有黑名单文件，但允许开启此功能，见下。<br>如果想让 chnroute 模式支持黑名单扩展，请打开 chinadns-ng 的 gfwlist 模式（<code>chinadns_gfwlist_mode</code>）；开启 gfwlist 模式后，chinadns-ng 会读取 <code>gfwlist.txt/ext</code> 黑名单文件中的<strong>域名模式</strong>；当 chinadns-ng 收到域名解析请求时，会先检查给定域名是否在黑名单中，如果是则只向可信 DNS 发出解析请求（也就是 <code>dns_remote/dns_remote6</code>），因此解析出来的会是国外 IP（不一定，具体要看给定域名的A&#x2F;AAAA记录以及其dns解析设定），然后当客户端访问该 IP 时就会走代理出去了（如果解析的地址是国外地址）。</li></ul><blockquote><p><code>chinadns_gfwlist_mode</code>的本意其实并不是为了支持’黑名单’，而是为了提高 chinadns-ng 的准确性，降低 dns 污染的可能性</p></blockquote><p>启动后，ss-tproxy会自动帮你做透明代理，会设置好iptables的配置，不需要在手工配置<br>同时ss-tproxy还提供勾子的形式，来帮助解决分流或者内网访问的一个方案，具体参考：</p><ul><li><a href="https://github.com/zfl9/ss-tproxy#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0">https://github.com/zfl9/ss-tproxy#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0</a></li><li><a href="https://github.com/zfl9/ss-tproxy#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0%E5%B0%8F%E6%8A%80%E5%B7%A7">https://github.com/zfl9/ss-tproxy#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0%E5%B0%8F%E6%8A%80%E5%B7%A7</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>代理</tag>
      
      <tag>透明代理</tag>
      
      <tag>vpn</tag>
      
      <tag>流量转发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>openvpn动态下发权限</title>
    <link href="/2022/12/14/openvpn/openvpn-dynamic-route-permissions/"/>
    <url>/2022/12/14/openvpn/openvpn-dynamic-route-permissions/</url>
    
    <content type="html"><![CDATA[<h2 id="首先了解我们为什么要动态下发"><a href="#首先了解我们为什么要动态下发" class="headerlink" title="首先了解我们为什么要动态下发"></a>首先了解我们为什么要动态下发</h2><ul><li>开源的openvpn并不支持权限管理，大部分在做权限管理的时候使用的都是根据来源IP或IP段通过iptables&#x2F;交换机来进行权限控制</li><li>权限控制太广了，根本无法很好的去做管理后台的配置，特别是需要用户组来进行区分的时候，那就更困难了</li></ul><h2 id="权限下发的逻辑"><a href="#权限下发的逻辑" class="headerlink" title="权限下发的逻辑"></a>权限下发的逻辑</h2><img  src=http://www.plantuml.com/plantuml/svg/Kr3WAiaioKbLo2z8pIiho7knVzwplgNFb-nwrjB_TFO-hkTJLZphsAwWQmTJOFMoOTQB_UrFMzSytpiHeXegmmMbTUrWIf_iw7xQFz4puEcS3K_dDhpVq_DYtRxdUzSzxLhnhA7nsTpcbpCd83H1RB9wkgxdMSS4YC40><h2 id="用到的技术"><a href="#用到的技术" class="headerlink" title="用到的技术"></a>用到的技术</h2><ul><li>ipset</li><li>iptables</li></ul><h2 id="主要脚本内容"><a href="#主要脚本内容" class="headerlink" title="主要脚本内容"></a>主要脚本内容</h2><h3 id="连接脚本"><a href="#连接脚本" class="headerlink" title="连接脚本"></a>连接脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">/sbin/ipset create <span class="hljs-variable">$&#123;common_name&#125;</span>-<span class="hljs-variable">$&#123;common_ip&#125;</span> <span class="hljs-built_in">hash</span>:ip<br>/sbin/ipset create <span class="hljs-variable">$&#123;common_name&#125;</span>-<span class="hljs-variable">$&#123;common_ip&#125;</span>-drop <span class="hljs-built_in">hash</span>:ip<br><span class="hljs-comment"># 这里是动态去你的后端获取出来的允许访问的列表，接口自己去实现</span><br><span class="hljs-keyword">for</span> ((i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable">$&#123;#permissionsAccept[@]&#125;</span>; i++)); <span class="hljs-keyword">do</span><br>    /sbin/ipset add <span class="hljs-variable">$&#123;common_name&#125;</span>-<span class="hljs-variable">$&#123;common_ip&#125;</span> <span class="hljs-variable">$&#123;permissionsAccept[$i]//\&quot;/&#125;</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-keyword">for</span> ((i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable">$&#123;#permissionsDrop[@]&#125;</span>; i++)); <span class="hljs-keyword">do</span><br>    /sbin/ipset add <span class="hljs-variable">$&#123;common_name&#125;</span>-<span class="hljs-variable">$&#123;common_ip&#125;</span>-drop <span class="hljs-variable">$&#123;permissionsDrop[$i]//\&quot;/&#125;</span><br><span class="hljs-keyword">done</span><br><span class="hljs-comment"># 设置iptables</span><br>/sbin/iptables -A FORWARD -s <span class="hljs-variable">$common_ip</span> -m <span class="hljs-built_in">set</span> --match-set <span class="hljs-variable">$&#123;common_name&#125;</span>-<span class="hljs-variable">$&#123;common_ip&#125;</span> dst -j ACCEPT<br>/sbin/iptables -A FORWARD -s <span class="hljs-variable">$common_ip</span> -m <span class="hljs-built_in">set</span> --match-set <span class="hljs-variable">$&#123;common_name&#125;</span>-<span class="hljs-variable">$&#123;common_ip&#125;</span>-drop dst -j DROP<br>/sbin/iptables -A FORWARD -s <span class="hljs-variable">$common_ip</span> -j DROP<br></code></pre></td></tr></table></figure><h3 id="断开脚本"><a href="#断开脚本" class="headerlink" title="断开脚本"></a>断开脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">/sbin/iptables -D FORWARD -s <span class="hljs-variable">$ifconfig_pool_remote_ip</span> -m <span class="hljs-built_in">set</span> --match-set <span class="hljs-variable">$&#123;common_name&#125;</span>-<span class="hljs-variable">$&#123;ifconfig_pool_remote_ip&#125;</span> dst -j ACCEPT<br>/sbin/iptables -D FORWARD -s <span class="hljs-variable">$ifconfig_pool_remote_ip</span> -m <span class="hljs-built_in">set</span> --match-set <span class="hljs-variable">$&#123;common_name&#125;</span>-<span class="hljs-variable">$&#123;ifconfig_pool_remote_ip&#125;</span>-drop dst -j DROP<br>/sbin/iptables -D FORWARD -s <span class="hljs-variable">$ifconfig_pool_remote_ip</span> -j DROP<br>/sbin/ipset destroy <span class="hljs-variable">$&#123;common_name&#125;</span>-<span class="hljs-variable">$&#123;ifconfig_pool_remote_ip&#125;</span><br>/sbin/ipset destroy <span class="hljs-variable">$&#123;common_name&#125;</span>-<span class="hljs-variable">$&#123;ifconfig_pool_remote_ip&#125;</span>-drop<br></code></pre></td></tr></table></figure><h2 id="如果在运行的过程中出现脚本权限不足"><a href="#如果在运行的过程中出现脚本权限不足" class="headerlink" title="如果在运行的过程中出现脚本权限不足"></a>如果在运行的过程中出现脚本权限不足</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 766 connect.sh disconnect.sh<br><span class="hljs-built_in">chmod</span> a+x connect.sh disconnect.sh<br><span class="hljs-built_in">chmod</span> +s connect.sh disconnect.sh<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>openvpn</tag>
      
      <tag>权限</tag>
      
      <tag>动态下发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zabbix 警报推送至企业微信（图文版）</title>
    <link href="/2022/12/13/zabbix/zabbix-wecom/"/>
    <url>/2022/12/13/zabbix/zabbix-wecom/</url>
    
    <content type="html"><![CDATA[<h2 id="新增Python脚本"><a href="#新增Python脚本" class="headerlink" title="新增Python脚本"></a>新增Python脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># encoding: utf-8</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> re<br> <br>url = <span class="hljs-string">&#x27;http://10.1.1.59/zabbix/api_jsonrpc.php&#x27;</span><br>headers = &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json-rpc&#x27;</span>&#125;<br>graph_path = <span class="hljs-string">&#x27;/data/zabbix/images/&#x27;</span>  <span class="hljs-comment"># 定义图片存储路径</span><br>graph_url = <span class="hljs-string">&#x27;http://10.1.1.59/zabbix/chart.php&#x27;</span>  <span class="hljs-comment"># 定义图表的url</span><br>loginurl = <span class="hljs-string">&quot;http://10.1.1.59/zabbix/index.php&quot;</span>  <span class="hljs-comment"># 定义登录的url</span><br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">uploadImg</span>(<span class="hljs-params">path,accessToken</span>):<br>    <span class="hljs-comment">#img_url = &quot;https://qyapi.weixin.qq.com/cgi-bin/webhook/upload_media?key=&quot; + key + &quot;&amp;type=file&quot;</span><br>    img_url = <span class="hljs-string">&quot;https://qyapi.weixin.qq.com/cgi-bin/media/uploadimg?access_token=&quot;</span>+accessToken<br>    files = &#123;<span class="hljs-string">&#x27;media&#x27;</span>: <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&#x27;rb&#x27;</span>)&#125;<br>    r = requests.post(img_url, files=files)<br>    re = json.loads(r.text)<br>    <span class="hljs-built_in">print</span>(re)<br>    <span class="hljs-keyword">return</span> re[<span class="hljs-string">&#x27;url&#x27;</span>]<br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_itemid</span>(<span class="hljs-params">message</span>):<br>    <span class="hljs-comment">#print(message)</span><br>    itemid = re.search(<span class="hljs-string">r&#x27;ITEMID:(\d+)&#x27;</span>, message).group(<span class="hljs-number">1</span>)<br>    <span class="hljs-comment">#itemid = 1</span><br>    <span class="hljs-keyword">return</span> itemid<br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_imgUrl</span>(<span class="hljs-params">itemid</span>):<br>    session = requests.Session()<br>    <span class="hljs-keyword">try</span>:<br>        loginheaders = &#123;<br>            <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;10.1.1.59&quot;</span>,<br>            <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;</span><br>        &#125;<br>        <span class="hljs-comment"># 定义请求消息头</span><br> <br>        payload = &#123;<br>            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&#x27;yantao&#x27;</span>,<br>            <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&#x27;xxxxxxx&#x27;</span>,<br>            <span class="hljs-string">&quot;autologin&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>            <span class="hljs-string">&quot;enter&quot;</span>: <span class="hljs-string">&quot;Sign in&quot;</span>,<br>        &#125;<br>        <span class="hljs-comment"># 定义传入的data</span><br>        login = session.post(url=loginurl, headers=loginheaders, data=payload)<br>        <span class="hljs-built_in">print</span>(login)<br>        graph_params = &#123;<br>            <span class="hljs-string">&quot;from&quot;</span>: <span class="hljs-string">&quot;now-10m&quot;</span>,<br>            <span class="hljs-string">&quot;to&quot;</span>: <span class="hljs-string">&quot;now&quot;</span>,<br>            <span class="hljs-string">&quot;itemids&quot;</span>: itemid,<br>            <span class="hljs-string">&quot;width&quot;</span>: <span class="hljs-string">&quot;400&quot;</span>,<br>        &#125;<br>        <span class="hljs-comment"># 定义获取图片的参数</span><br>        graph_req = session.get(url=graph_url, params=graph_params)<br>        <span class="hljs-comment"># 发送get请求获取图片数据</span><br>        time_tag = time.strftime(<span class="hljs-string">&quot;%Y%m%d%H%M%S&quot;</span>, time.localtime())<br>        graph_name = <span class="hljs-string">&#x27;baojing_&#x27;</span> + time_tag + <span class="hljs-string">&#x27;.png&#x27;</span><br>        <span class="hljs-comment"># 用报警时间来作为图片名进行保存</span><br>        graph_name = os.path.join(graph_path, graph_name)<br>        <span class="hljs-comment"># 使用绝对路径保存图片</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(graph_name, <span class="hljs-string">&#x27;wb&#x27;</span>, ) <span class="hljs-keyword">as</span> f:<br>            f.write(graph_req.content)<br>            <span class="hljs-comment"># 将获取到的图片数据写入到文件中去</span><br>        <span class="hljs-keyword">return</span> graph_name<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getAccessToken</span>():<br>    api_url = <span class="hljs-string">&quot;https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=corpid&amp;corpsecret=corpsecret&quot;</span><br>    content = requests.get(api_url)<br>    <span class="hljs-comment">#print(content.json())</span><br>    <span class="hljs-keyword">return</span> content.json().get(<span class="hljs-string">&quot;access_token&quot;</span>)<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getImgUrl</span>(<span class="hljs-params">mediaId,accessToken</span>):<br>    api_url = <span class="hljs-string">&quot;https://qyapi.weixin.qq.com/cgi-bin/media/get?access_token=&quot;</span>+accessToken+<span class="hljs-string">&quot;&amp;media_id=&quot;</span>+mediaId<br>    content = requests.get(api_url)<br>    <span class="hljs-built_in">print</span>(mediaId)<br>    <span class="hljs-built_in">print</span>(content.json())<br>    <span class="hljs-keyword">return</span> content.json().get(<span class="hljs-string">&quot;url&quot;</span>)<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_message</span>(<span class="hljs-params">imgUrl,title,desc,openUrl,key</span>):<br>    <span class="hljs-comment"># 发送消息</span><br>    url = <span class="hljs-string">&quot;https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=&quot;</span> + key<br>    <span class="hljs-comment"># message = title  # sys.argv[3]</span><br>    params = &#123;<br>        <span class="hljs-string">&quot;msgtype&quot;</span>: <span class="hljs-string">&quot;template_card&quot;</span>,<br>        <span class="hljs-string">&quot;template_card&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;card_type&quot;</span>: <span class="hljs-string">&quot;news_notice&quot;</span>,<br>            <span class="hljs-string">&quot;source&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;desc&quot;</span>: <span class="hljs-string">&quot;Zabbix网络警报&quot;</span>,<br>                <span class="hljs-string">&quot;desc_color&quot;</span>: <span class="hljs-number">0</span><br>            &#125;,<br>            <span class="hljs-string">&quot;main_title&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;Zabbix网络警报&quot;</span>,<br>            &#125;,<br>            <span class="hljs-string">&quot;quote_area&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-number">0</span>,<br>                <span class="hljs-string">&quot;quote_text&quot;</span>:desc<br>            &#125;,<br>            <span class="hljs-string">&quot;card_image&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;url&quot;</span>: imgUrl<br>            &#125;,<br>            <span class="hljs-string">&quot;card_action&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-number">1</span>,<br>                <span class="hljs-string">&quot;url&quot;</span>: openUrl,<br>                <span class="hljs-string">&quot;appid&quot;</span>: <span class="hljs-string">&quot;APPID&quot;</span>,<br>                <span class="hljs-string">&quot;pagepath&quot;</span>: <span class="hljs-string">&quot;PAGEPATH&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    req = requests.post(url, data=json.dumps(params))<br>    <span class="hljs-built_in">print</span>(req.json())<br> <br> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    message = sys.argv[<span class="hljs-number">1</span>]<br>    <span class="hljs-built_in">print</span>(message)<br>    itemid = get_itemid(message)<br>    imgpath = get_imgUrl(itemid)<br>    accessToken = getAccessToken();<br>    imgUrl = uploadImg(imgpath,accessToken)<br>    <span class="hljs-comment">#print(itemid)</span><br>    <span class="hljs-comment">#print(imgpath)</span><br>    <span class="hljs-built_in">print</span>(imgUrl)<br>    send_message(imgUrl,sys.argv[<span class="hljs-number">2</span>],sys.argv[<span class="hljs-number">3</span>],imgUrl,sys.argv[<span class="hljs-number">4</span>])<br>    <span class="hljs-comment">#accessToken = getAccessToken()</span><br></code></pre></td></tr></table></figure><h2 id="新增SH脚本"><a href="#新增SH脚本" class="headerlink" title="新增SH脚本"></a>新增SH脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>echo $1 &gt;&gt; /data/zabbix/log.log<br>python /usr/lib/zabbix/alertscripts/wxcom.py $1 $2 $3 $4<br></code></pre></td></tr></table></figure><p>把两个文件都放到这个目录下：&#x2F;usr&#x2F;lib&#x2F;zabbix&#x2F;alertscripts&#x2F;</p><h2 id="配置媒介"><a href="#配置媒介" class="headerlink" title="配置媒介"></a>配置媒介</h2>]]></content>
    
    
    
    <tags>
      
      <tag>企业微信</tag>
      
      <tag>zabbix</tag>
      
      <tag>报警</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装&amp;破解Openvpn Access Server</title>
    <link href="/2022/12/13/openvpn/openvpn-access-server/"/>
    <url>/2022/12/13/openvpn/openvpn-access-server/</url>
    
    <content type="html"><![CDATA[<h2 id="在线安装（需要翻墙）"><a href="#在线安装（需要翻墙）" class="headerlink" title="在线安装（需要翻墙）"></a>在线安装（需要翻墙）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install https://as-repository.openvpn.net/as-repo-centos7.rpm<br>yum -y install openvpn-as<br></code></pre></td></tr></table></figure><h2 id="管理员登录"><a href="#管理员登录" class="headerlink" title="管理员登录"></a>管理员登录</h2><p>首先需要修改管理员密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">passwd openvpn<br></code></pre></td></tr></table></figure><p>输入之后可以登录管理员页面了。</p><p>如果密码一直错误的话，说明修改失败了，可以查看下原来的密码是什么</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /usr/local/openvpn_as/init.log<br></code></pre></td></tr></table></figure><p>登录后点击User Management–&gt;User Permissions 添加用户</p><h2 id="破解用户数"><a href="#破解用户数" class="headerlink" title="破解用户数"></a>破解用户数</h2><ul><li>主要操作的文件是一个名叫 <code>pyovpn-2.0-pyx.x.egg</code> 的文件，以我了解的情况来看，从 <code>2.5.0</code> 到 <code>2.9.x</code> 文件名一直都是这个，只是不同版本里面的内容不一样.</li><li>这个文件有点类似 <code>Java</code> 当中的 <code>jar</code> 库文件，也是一个 <code>zip</code> 压缩文件，里面包含了一些 <code>Python</code> 的字节码文件.</li><li>破解的原理大概是在 <code>Python</code> 中采用类似 <code>Java</code> 动态代理的技术，将原本读取用户属性的调用返回值拦截，修改用户限制数量再返回.</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p><code>2.9.0</code> 以下版本破解的目标文件是 <code>/pyovpn/lic/uprop.pyo</code>, <code>2.9.0</code> 及以上是 <code>/pyovpn/lic/uprop.pyc</code>; 按照网上流行的破解方法，把这个文件解压出来并改名为 <code>uprop2.pyo</code> 或 <code>uprop2.pyc</code>, 然后新建一个 <code>uprop.py</code> 文件，内容如下:</p><p><code>**2.9.0**</code><strong>以下版本内容:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">import uprop2<br>old_figure = None<br><br>def new_figure(self, licdict):<br>    ret = old_figure(self, licdict)<br>    ret[&#x27;concurrent_connections&#x27;] = 1024<br>    return ret<br><br><br>for x in dir(uprop2):<br>    if x[:2] == &#x27;__&#x27;:<br>        continue<br>    if x == &#x27;UsageProperties&#x27;:<br>        exec(&#x27;old_figure = uprop2.UsageProperties.figure&#x27;)<br>        exec(&#x27;uprop2.UsageProperties.figure = new_figure&#x27;)<br>    exec(&#x27;%s = uprop2.%s&#x27; % (x, x))<br></code></pre></td></tr></table></figure><p><code>**2.9.0**</code><strong>及以上版本内容:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">from pyovpn.lic import uprop2<br>old_figure = None<br><br>def new_figure(self, licdict):<br>    ret = old_figure(self, licdict)<br>    ret[&#x27;concurrent_connections&#x27;] = 1024<br>    return ret<br><br><br>for x in dir(uprop2):<br>    if x[:2] == &#x27;__&#x27;:<br>        continue<br>    if x == &#x27;UsageProperties&#x27;:<br>        exec(&#x27;old_figure = uprop2.UsageProperties.figure&#x27;)<br>        exec(&#x27;uprop2.UsageProperties.figure = new_figure&#x27;)<br>    exec(&#x27;%s = uprop2.%s&#x27; % (x, x))<br></code></pre></td></tr></table></figure><p>再将上面的 <code>uprop.py</code> 编译为库文件 <code>uprop.pyo</code> 或 <code>uprop.pyc</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">&lt;2.9.0</span><br>python2 -O -m compileall uprop.py<br><span class="hljs-meta prompt_"># </span><span class="language-bash">&gt;=2.9.0</span><br>python3 -O -m compileall uprop.py &amp;&amp; mv __pycache__/uprop.cpython-37.opt-1.pyc uprop.pyc<br></code></pre></td></tr></table></figure><blockquote><p>注意 <code>uprop.cpython-37.opt-1.pyc</code> 文件名会随着 <code>python</code> 版本变化而变化.</p></blockquote><p>现在我们得到了一个改文件名的文件 <code>uprop2.pyo</code> 或 <code>uprop2.pyc</code>, 和一个编译出来的 <code>uprop.pyo</code> 或 <code>uprop.pyc</code>; 把这两个文件压缩到 <code>pyovpn-2.0-pyx.x.egg</code> 的 <code>/pyovpn/lic/</code> 目录下，然后去服务器替换目标文件，重启服务就 OK 了.</p><h2 id="所有的操作命令"><a href="#所有的操作命令" class="headerlink" title="所有的操作命令"></a>所有的操作命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">把操作的文件复制出来到另外的一个文件夹下面操作</span><br>cd /usr/local/openvpn_as/lib/python &amp; mkdir pojie &amp; cp python/pyovpn-2.0-py3.6.egg ./pojie &amp; cd pojie/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">改一个文件名，防止后面打包的时候把源文件覆盖了</span><br>mv pyovpn-2.0-py3.6.egg pyovpn-2.0-py3.6.egg.bak &amp; unzip pyovpn-2.0-py3.6.egg.bak<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入到需要修改的目录</span><br>cd pyovpn/lic<br><span class="hljs-meta prompt_"># </span><span class="language-bash">复制源文件改名</span><br>mv uprop.pyc uprop2.pyc<br><span class="hljs-meta prompt_"># </span><span class="language-bash">新增一个py文件，然后把文件内容复制进去，并保存</span><br>vi uprop.py<br><span class="hljs-meta prompt_"># </span><span class="language-bash">退到 pojie 文件夹，进行打包</span><br>zip -r pyovpn-2.0-py3.6.egg EGG-INFO/ common/ pyovpn/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">复制文件到运行目录，覆盖</span><br>cp pyovpn-2.0-py3.6.egg /usr/local/openvpn_as/lib/python<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启服务</span><br>systemctl restart openvpnas<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>openvpn</tag>
      
      <tag>2.9.0</tag>
      
      <tag>openvpn access server</tag>
      
      <tag>破解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过 Haproxy 实现 Shadowshadows 负载均衡</title>
    <link href="/2022/12/13/haproxy-load/"/>
    <url>/2022/12/13/haproxy-load/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>缺点：所有的SS的加密方式和密码必须一致<br>介绍：HAProxy是一个使用C语言编写的自由及开放原始码软件，其提供高可用性、负载均衡，以及基于TCP和HTTP的应用程序代理。</p><h2 id="安装Haproxy"><a href="#安装Haproxy" class="headerlink" title="安装Haproxy"></a>安装Haproxy</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install haproxy<br></code></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs shell">global<br>    chroot  /var/lib/haproxy<br>    pidfile /var/run/haproxy.pid<br>    user    haproxy<br>    group   haproxy<br>defaults<br>    mode    tcp                         #服务器默认的工作模式<br>    balance roundrobin                  #服务器默认使用的均衡模式<br>    retries 3                           #三次连接失败表示服务器不可用<br>    maxconn 5000                        #最大连接数<br>    timeout connect 500ms               #连接超时<br>    timeout client  3s                  #客户端超时<br>    timeout server  3s                  #服务器超时<br><br><br>listen WebPanel<br>    mode    http                        #这里使用HTTP模式<br>    bind    10.1.1.58:9595               #WEB服务端口<br>    stats   refresh 5s                  #自动刷新时间<br>    stats   uri  /                      #WEB管理地址<br>    stats   auth admin:xxxx         #账号密码<br>    stats   hide-version                #隐藏版本<br>    stats   admin if TRUE               #验证通过则赋予管理权<br><br>frontend shadowsocks-in<br>    bind *:50001<br>    default_backend servers<br><br>backend servers<br>    mode tcp<br>    balance roundrobin<br>    # option external-check<br>    option tcp-check<br>    # external-check command &quot;/etc/haproxy/haproxy-shadowsocks-checker.py&quot;<br><br>    server ss1 43.156.100.84:2195 check inter 500 rise 2 fall 4 weight 100   #SS/SSR服务器地址与端口<br>    server ss2 42.157.192.42:10108 check inter 500 rise 2 fall 4 weight 100<br></code></pre></td></tr></table></figure><p><code>server</code>：后面首先跟名字，名字随便起呗，自己能够区分就行。紧接着跟SS的公网IP+端口，端口也就是SS&#x2F;SSR的端口。<br><code>check</code>：是检测的意思，这段配置很重要<br><code>inter</code>：单位毫秒，我配置的500，即500毫秒检测一次目标服务器。<br><code>rise2</code>：设定健康状态检查中，某离线的服务器从离线状态转换至正常状态需要成功检查的次数，这里我设置的2次。<br><code>fall4</code>：确认服务器从正常状态转换为不可用状态需要检查的次数，这里是4次。<br><code>weight</code>：权重，值越大代表这台机器工作的机会越多，这里我们可以把一台线路较好的机器的权重设置高一些。<br><code>balance</code>：负载均衡方式</p><ul><li>roundrobin：基于权重进行轮叫，在服务器的处理时间保持均匀分布时，这是最平衡、最公平的算法。此算法是动态的，这表示其权重可以在运行时进行调整，不过，在设计上，每个后端服务器仅能最多接受4128个连接；</li><li>static-rr：基于权重进行轮叫，与roundrobin类似，但是为静态方法，在运行时调整其服务器权重不会生效；不过，其在后端服务器连接数上没有限制；</li><li>leastconn：新的连接请求被派发至具有最少连接数目的后端服务器；在有着较长时间会话的场景中推荐使用此算法，如LDAP、SQL等，其并不太适用于较短会话的应用层协议，如HTTP；此算法是动态的，可以在运行时调整其权重；</li><li>source：将请求的源地址进行hash运算，并由后端服务器的权重总数相除后派发至某匹配的服务器；这可以使得同一个客户端IP的请求始终被派发至某特定的服务器；不过，当服务器权重总数发生变化时，如某服务器宕机或添加了新的服务器，许多客户端的请求可能会被派发至与此前请求不同的服务器；常用于 负载均衡无cookie功能的基于TCP的协议；其默认为静态，不过也可以使用hash-type修改此特性；</li></ul><h2 id="修改Shadowsocks配置"><a href="#修改Shadowsocks配置" class="headerlink" title="修改Shadowsocks配置"></a>修改Shadowsocks配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#123;<br>    &quot;server&quot;:&quot;127.0.0.1&quot;, # 这里改成Haproxy的地址<br>    &quot;server_port&quot;:50001, # 这里改成Haproxy监听的端口<br>    &quot;local_port&quot;:1080, # 这里本地监听端口<br>    &quot;password&quot;:&quot;qunheadmin&quot;,<br>    &quot;timeout&quot;:60,<br>    &quot;method&quot;:&quot;aes-256-gcm&quot;,<br>    &quot;mode&quot;:&quot;tcp_and_udp&quot;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>openvpn-auth（支持企业微信认证&amp;LDAP）</title>
    <link href="/2022/12/13/openvpn/openvpn-auth/"/>
    <url>/2022/12/13/openvpn/openvpn-auth/</url>
    
    <content type="html"><![CDATA[<h2 id="方案介绍"><a href="#方案介绍" class="headerlink" title="方案介绍"></a>方案介绍</h2><h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><img src="/2022/12/13/openvpn/openvpn-auth/image2022-12-12_20-11-38.png" class="" alt="openvpn-auth 时序图"><h2 id="其中有两个地方需要修改"><a href="#其中有两个地方需要修改" class="headerlink" title="其中有两个地方需要修改"></a>其中有两个地方需要修改</h2><ul><li><code>corpid</code>: 企业微信的企业ID</li><li><code>corpsecret</code>: 拥有通讯录的企业微信的Secret</li></ul><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> auth<br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;io/ioutil&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br><span class="hljs-string">&quot;github.com/tidwall/gjson&quot;</span><br>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetAccessToken</span><span class="hljs-params">()</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> GetWecomToken()<br>&#125;<br><span class="hljs-comment">// 从企业微信获取Token</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetWecomToken</span><span class="hljs-params">()</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-comment">//创建一个请求</span><br>req, err := http.NewRequest(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=corpid&amp;corpsecret=corpsecret&quot;</span>, <span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(<span class="hljs-string">&quot;NewRquest:&quot;</span>, err)<br>&#125;<br>client := &amp;http.Client&#123;&#125;<br><span class="hljs-comment">//设置请求头</span><br>req.Header.Set(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json; charset=utf-8&quot;</span>)<br><span class="hljs-comment">//发送请求</span><br>resp, err := client.Do(req)<br><span class="hljs-comment">//关闭请求</span><br><span class="hljs-keyword">defer</span> resp.Body.Close()<br>body, err := ioutil.ReadAll(resp.Body)<br>access_token := gjson.Get(<span class="hljs-type">string</span>(body), <span class="hljs-string">&quot;access_token&quot;</span>)<br><span class="hljs-keyword">return</span> access_token.Str<br>&#125;<br><span class="hljs-comment">// 获取员工信息</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WeComAuth</span><span class="hljs-params">(userId <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-comment">//创建一个请求</span><br>req, err := http.NewRequest(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">`https://qyapi.weixin.qq.com/cgi-bin/user/get?access_token=`</span>+GetAccessToken()+<span class="hljs-string">`&amp;userid=`</span>+userId, <span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(<span class="hljs-string">&quot;NewRquest:&quot;</span>, err)<br>&#125;<br>client := &amp;http.Client&#123;&#125;<br><span class="hljs-comment">//设置请求头</span><br>req.Header.Set(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json; charset=utf-8&quot;</span>)<br><span class="hljs-comment">//发送请求</span><br>resp, err := client.Do(req)<br><span class="hljs-comment">//关闭请求</span><br><span class="hljs-keyword">defer</span> resp.Body.Close()<br>body, err := ioutil.ReadAll(resp.Body)<br>errcode := gjson.Get(<span class="hljs-type">string</span>(body), <span class="hljs-string">&quot;errcode&quot;</span>)<br><span class="hljs-type">int</span>, err := strconv.Atoi(errcode.Str)<br><span class="hljs-keyword">return</span> <span class="hljs-type">int</span> == <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>修改<code>/etc/openvpn/server.conf</code>的验证方式，可以吧其他的验证去掉</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">auth-user-pass-verify /etc/openvpn/openvpn-wecom-password via-file<br></code></pre></td></tr></table></figure><h2 id="加解密方式"><a href="#加解密方式" class="headerlink" title="加解密方式"></a>加解密方式</h2><p>因为用到了客户端传过来的时候的加密方式，因此两边的加密方式必须一致</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> util<br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br>basicAES <span class="hljs-string">&quot;crypto/aes&quot;</span><br><span class="hljs-string">&quot;crypto/cipher&quot;</span><br><span class="hljs-string">&quot;encoding/base64&quot;</span><br>)<br><span class="hljs-keyword">type</span> Aes <span class="hljs-keyword">struct</span> &#123;<br>securityKey []<span class="hljs-type">byte</span><br>iv          []<span class="hljs-type">byte</span><br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * constructor</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">AesTool</span><span class="hljs-params">()</span></span> *Aes &#123;<br><span class="hljs-keyword">return</span> &amp;Aes&#123;[]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;123&quot;</span>), []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;123&quot;</span>)&#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 加密</span><br><span class="hljs-comment"> * @param string $plainText 明文</span><br><span class="hljs-comment"> * @return bool|string</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a Aes)</span></span> Encrypt(plainText <span class="hljs-type">string</span>) (<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) &#123;<br>block, err := basicAES.NewCipher(a.securityKey)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err<br>&#125;<br>plainTextByte := []<span class="hljs-type">byte</span>(plainText)<br>blockSize := block.BlockSize()<br>plainTextByte = AddPKCS7Padding(plainTextByte, blockSize)<br>cipherText := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-built_in">len</span>(plainTextByte))<br>mode := cipher.NewCBCEncrypter(block, a.iv)<br>mode.CryptBlocks(cipherText, plainTextByte)<br><span class="hljs-keyword">return</span> base64.StdEncoding.EncodeToString(cipherText), <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 解密</span><br><span class="hljs-comment"> * @param string $cipherText 密文</span><br><span class="hljs-comment"> * @return bool|string</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a Aes)</span></span> Decrypt(cipherText <span class="hljs-type">string</span>) (<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) &#123;<br>block, err := basicAES.NewCipher(a.securityKey)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err<br>&#125;<br>cipherDecodeText, decodeErr := base64.StdEncoding.DecodeString(cipherText)<br><span class="hljs-keyword">if</span> decodeErr != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, decodeErr<br>&#125;<br>mode := cipher.NewCBCDecrypter(block, a.iv)<br>originCipherText := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-built_in">len</span>(cipherDecodeText))<br>mode.CryptBlocks(originCipherText, cipherDecodeText)<br>originCipherText = StripPKSC7Padding(originCipherText)<br><span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(originCipherText), <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 填充算法</span><br><span class="hljs-comment"> * @param string $source</span><br><span class="hljs-comment"> * @return string</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">AddPKCS7Padding</span><span class="hljs-params">(ciphertext []<span class="hljs-type">byte</span>, blockSize <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br>padding := blockSize - <span class="hljs-built_in">len</span>(ciphertext)%blockSize<br>paddingText := bytes.Repeat([]<span class="hljs-type">byte</span>&#123;<span class="hljs-type">byte</span>(padding)&#125;, padding)<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">append</span>(ciphertext, paddingText...)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 移去填充算法</span><br><span class="hljs-comment"> * @param string $source</span><br><span class="hljs-comment"> * @return string</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">StripPKSC7Padding</span><span class="hljs-params">(cipherText []<span class="hljs-type">byte</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br>length := <span class="hljs-built_in">len</span>(cipherText)<br>unpadding := <span class="hljs-type">int</span>(cipherText[length<span class="hljs-number">-1</span>])<br><span class="hljs-keyword">return</span> cipherText[:(length - unpadding)]<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>openvpn</tag>
      
      <tag>openvpn-auth</tag>
      
      <tag>wecom</tag>
      
      <tag>企业微信</tag>
      
      <tag>认证</tag>
      
      <tag>ldap</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
