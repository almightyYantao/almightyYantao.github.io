<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YanTao的线上笔记本</title>
  
  <subtitle>一个混迹在IT行业的菜鸟</subtitle>
  <link href="https://almightyyantao.github.io/atom.xml" rel="self"/>
  
  <link href="https://almightyyantao.github.io/"/>
  <updated>2023-02-20T05:50:02.922Z</updated>
  <id>https://almightyyantao.github.io/</id>
  
  <author>
    <name>Yan Tao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>curl 检测代理的可用性以及延迟</title>
    <link href="https://almightyyantao.github.io/2023/02/20/curl%20%E6%A3%80%E6%B5%8B%E4%BB%A3%E7%90%86%E7%9A%84%E5%8F%AF%E7%94%A8%E6%80%A7%E4%BB%A5%E5%8F%8A%E5%BB%B6%E8%BF%9F/"/>
    <id>https://almightyyantao.github.io/2023/02/20/curl%20%E6%A3%80%E6%B5%8B%E4%BB%A3%E7%90%86%E7%9A%84%E5%8F%AF%E7%94%A8%E6%80%A7%E4%BB%A5%E5%8F%8A%E5%BB%B6%E8%BF%9F/</id>
    <published>2023-02-19T16:00:00.000Z</published>
    <updated>2023-02-20T05:50:02.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在办公网的代理翻墙的过程中，经常没办法第一时间知道代理失效了，因为我们自身不是高用的用户，每次挂了都需要员工来反馈，体感非常的不好，因此想着可以通过<code>zabbix</code>如果把当前的延迟、可用性检测起来</p><span id="more"></span><h1 id="通过Curl-检测Google的延迟"><a href="#通过Curl-检测Google的延迟" class="headerlink" title="通过Curl 检测Google的延迟"></a>通过Curl 检测Google的延迟</h1><p>这里为啥是curl而不是ping，因为默认ping事不支持代理的，然而curl也可以做到真正的是否可用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o /dev/null -x socks5h://127.0.0.1:12126 -s --connect-timeout 5 -w %&#123;time_starttransfer&#125;<span class="string">&quot;\n&quot;</span> <span class="variable">$1</span></span><br></pre></td></tr></table></figure><p><code>socks5h</code>的地址需要改成你的代理地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前代理的可用性</span></span><br><span class="line">```bash</span><br><span class="line">url=<span class="variable">$1</span></span><br><span class="line">result=($(curl -x socks5h://localhost:12126 -I -s --connect-timeout 5 <span class="variable">$&#123;url&#125;</span> | <span class="built_in">head</span> -1 | <span class="built_in">tr</span> <span class="string">&quot;\r&quot;</span> <span class="string">&quot;\n&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$&#123;result[1]&#125;</span>&quot;</span> == <span class="variable">$2</span> -a <span class="string">&quot;<span class="variable">$&#123;result[2]&#125;</span>&quot;</span> == <span class="string">&#x27;OK&#x27;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> 1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h1 id="zabbix操作脚本"><a href="#zabbix操作脚本" class="headerlink" title="zabbix操作脚本"></a>zabbix操作脚本</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 延迟</span></span><br><span class="line">UserParameter=googleTime[*],/etc/zabbix/script/googleTime.sh <span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可用</span></span><br><span class="line">UserParameter=googleCheck[*],/etc/zabbix/script/googleCheck.sh <span class="variable">$1</span> <span class="variable">$2</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在办公网的代理翻墙的过程中，经常没办法第一时间知道代理失效了，因为我们自身不是高用的用户，每次挂了都需要员工来反馈，体感非常的不好，因此想着可以通过&lt;code&gt;zabbix&lt;/code&gt;如果把当前的延迟、可用性检测起来&lt;/p&gt;</summary>
    
    
    
    
    <category term="curl" scheme="https://almightyyantao.github.io/tags/curl/"/>
    
    <category term="代理" scheme="https://almightyyantao.github.io/tags/%E4%BB%A3%E7%90%86/"/>
    
    <category term="检测" scheme="https://almightyyantao.github.io/tags/%E6%A3%80%E6%B5%8B/"/>
    
    <category term="zabbix" scheme="https://almightyyantao.github.io/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>记录一次办公网全球化的改造计划</title>
    <link href="https://almightyyantao.github.io/2023/02/17/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%8A%9E%E5%85%AC%E7%BD%91Panabit%E5%85%A8%E7%90%83%E5%8C%96%E7%9A%84%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92/"/>
    <id>https://almightyyantao.github.io/2023/02/17/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%8A%9E%E5%85%AC%E7%BD%91Panabit%E5%85%A8%E7%90%83%E5%8C%96%E7%9A%84%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92/</id>
    <published>2023-02-16T16:00:00.000Z</published>
    <updated>2023-02-20T05:35:48.737Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>办公网每次去海外找资料都需要重新连接VPN，或者自己连接自己买的小飞机之类的才可以。但是这种在互联网公司内的话，非常的不友好；为公司工作还要自己花钱买小飞机～</p><p>之前尝试过下面这种方式：<br>新增一台海外的机器（新加坡、香港）搭建SS&#x2F;v2ray&#x2F;trojan之类的协议，然后办公网新增一个软路由去连接，通过ACL把部分IP的用户跳转过去；<br>但是这种方式自己家里用用还行，如果想要在企业的办公网来使用的话，人一多就不行，因为所有人都从这个IP出去了，而且每次都需要命令行去操作ACL增加用户，非常的麻烦；</p><span id="more"></span><h1 id="名词介绍"><a href="#名词介绍" class="headerlink" title="名词介绍"></a>名词介绍</h1><table><thead><tr><th>名词</th><th>介绍</th></tr></thead><tbody><tr><td>Panabit</td><td>Panabit是国内X86平台单板处理能力最高（双向40G）、在运营商和高校等行业案例过千（X运营商千兆以上规格共计400余台已普遍连续稳定运行至第7年），实时对超过3TB的网络带宽进行DPI识别与优化服务、并针对中小企业提供免费版本（软件形态），是以DPI为核心优势并发展起来的专业、上线效果好、性价比高的新一代应用网关。进入2014年，实际支持国内应用协议超过800种，并已集成路由、负载均衡、认证、一拖N检测、移动终端识别、DNS管控、HTTP管控、日志审计等实用功能于一体。</td></tr></tbody></table><h1 id="Panabit-的-Iwan"><a href="#Panabit-的-Iwan" class="headerlink" title="Panabit 的 Iwan"></a>Panabit 的 Iwan</h1><p>为了解决前面的这种方式，决定测试使用 Panabit 的 Iwan 的方式，也就是所谓的 Panabit 的 <code>SD-WAN</code>；</p><ul><li>重连速度很快：<br>        比L2TP的要快一个数量级，L2TP要重连，需要有几十次交互，而我们只需要一次即可  </li><li>客户端不受底层承载线路IP变化影响：<br>        当底层承载线路（比如PPPOE拨号线路）的IP地址发生变化时，不会影响iWAN隧道，iWAN隧道不会中断，保证通信正常进行；<br>        因为很多用户是通过PPPOE拨号线路出去的，PPPOE拨号线路重拨时一般会改变IP地址，如果用L2TP的话，那么这个L2TP会话就要重建；<br>        而用iWAN的话，现有的会话可以照常使用，不需要做任何改变；  </li><li>传输效率高：<br>        iWAN的包头很小，只有8个字节，而且在后续版本里，我们会压缩IP报文头，这样可以继续减少额外报文头的大小，所以能大幅度提升传输效率；<br>        如果用国际线路的话，节省下来的流量费用都是很可观的；  </li><li>抗干扰：<br>        不像L2TP，中间人可以直接发包TERMINATE，iWAN控制命令有完整性检查，可以避免中间人攻击。</li></ul><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="1、搭建panabit"><a href="#1、搭建panabit" class="headerlink" title="1、搭建panabit"></a>1、搭建panabit</h2><p>记得服务器申请2H的，1H需要需改核心，非常麻烦<br>下载Linux系统文件：文末<br>上传文件到root根目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -xzf PanabitFREE_SUIr2p3_20220413_Linux3.tar.gz</span><br><span class="line"><span class="built_in">cd</span> PanabitFREE_SUIr2p3_20220413_Linux3</span><br><span class="line"><span class="comment"># 输入以下命令进行安装</span></span><br><span class="line">./ipeinstall</span><br></pre></td></tr></table></figure><p>修改<code>/etc/PG.conf</code>文件<br>因为是单网口，所以数据口和管理口都需要配置成eth0，后面不要加任何东西</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DATA_PORTS 修改成：DATA_PORTS=<span class="string">&quot;eth0&quot;</span></span><br></pre></td></tr></table></figure><h3 id="修改端口"><a href="#修改端口" class="headerlink" title="修改端口"></a>修改端口</h3><h4 id="上传文件，修改配置"><a href="#上传文件，修改配置" class="headerlink" title="上传文件，修改配置"></a>上传文件，修改配置</h4><p>需要上传一个joskmc文件（文件在文末）<br>在<code>/etc/PG.conf</code>中新增一下一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTTPS_PORT=2194</span><br></pre></td></tr></table></figure><h4 id="执行joskmc"><a href="#执行joskmc" class="headerlink" title="执行joskmc"></a>执行joskmc</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/root/joskmc tcp 2194</span><br></pre></td></tr></table></figure><h4 id="修改：-etc-rc-local，增加一下三行"><a href="#修改：-etc-rc-local，增加一下三行" class="headerlink" title="修改：/etc/rc.local，增加一下三行"></a>修改：<code>/etc/rc.local</code>，增加一下三行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sleep</span> 10</span><br><span class="line">/root/joskmc tcp 2194</span><br></pre></td></tr></table></figure><h2 id="2、进行隧道配置（海外）"><a href="#2、进行隧道配置（海外）" class="headerlink" title="2、进行隧道配置（海外）"></a>2、进行隧道配置（海外）</h2><h3 id="1-、登录WEB页面，修改网卡方向"><a href="#1-、登录WEB页面，修改网卡方向" class="headerlink" title="(1)、登录WEB页面，修改网卡方向"></a>(1)、登录WEB页面，修改网卡方向</h3><p>默认账号密码：admin&#x2F;panabit<br>系统概况 → 网络接口：eth0，修改成对外，只有对外才可以创建WAN线路<br><img src="https://raw.githubusercontent.com/almightyYantao/blog-img/master/20230217103308.png"/></p><h3 id="2-、创建WAN线路"><a href="#2-、创建WAN线路" class="headerlink" title="(2)、创建WAN线路"></a>(2)、创建WAN线路</h3><p>应用路由 → 接口线路：<br>需要注意，Mac地址必须克隆<br><img src="https://raw.githubusercontent.com/almightyYantao/blog-img/master/202302171033490.png"/></p><h3 id="3-、创建IWAN连接账号"><a href="#3-、创建IWAN连接账号" class="headerlink" title="(3)、创建IWAN连接账号"></a>(3)、创建IWAN连接账号</h3><p>对象管理 → 账号管理 → 组织架构：<br>地址范围：这一块可以自己定一个内网的IP段就可以，不要冲突就好<br><img src="https://raw.githubusercontent.com/almightyYantao/blog-img/master/20230217103417.png"/><br>地址范围需要把网关地址留出来！！！！！<br><img src="https://raw.githubusercontent.com/almightyYantao/blog-img/master/20230217103432.png"/><br>对象管理 → 账号管理 → 本地账号：<br>处理用户组需要选择前面创建的用户组，其他的根据实际情况填写<br><img src="https://raw.githubusercontent.com/almightyYantao/blog-img/master/20230217103454.png"/></p><h3 id="4-、创建iWAN服务"><a href="#4-、创建iWAN服务" class="headerlink" title="(4)、创建iWAN服务"></a>(4)、创建iWAN服务</h3><p>应用路由 → iWAN服务 → 服务列表：<br>注意：服务器网关地址要和你前面设置的地址范围要在一块，并且需要排除这个地址的下发<br><img src="https://raw.githubusercontent.com/almightyYantao/blog-img/master/20230217103517.png"/><br>应用路由 → iWAN服务 → 服务映射：<br>根据配置情况选择即可<br>iWAN使用的是UDP连接，因此端口需要开放UDP<br><img src="https://raw.githubusercontent.com/almightyYantao/blog-img/master/20230217103531.png"/></p><h3 id="5-、创建策略路由"><a href="#5-、创建策略路由" class="headerlink" title="(5)、创建策略路由"></a>(5)、创建策略路由</h3><p>应用路由 → 策略路由：需要添加一条回程的全程路由，要不然DNS牵引、FQ都会失败<br>这里选择iWAN的线路<br><img src="https://raw.githubusercontent.com/almightyYantao/blog-img/master/20230217103546.png"/></p><h2 id="3、客户端配置（办公网）"><a href="#3、客户端配置（办公网）" class="headerlink" title="3、客户端配置（办公网）"></a>3、客户端配置（办公网）</h2><h3 id="1-、新建WAN线路"><a href="#1-、新建WAN线路" class="headerlink" title="(1)、新建WAN线路"></a>(1)、新建WAN线路</h3><p>应用路由 → 接口线路 → WAN线路：按照信息提示填写即可完成iWAN线路配置<br>注意：必须有一个外网的网卡，并且最好把加密开起来<br><img src="https://raw.githubusercontent.com/almightyYantao/blog-img/master/20230217103622.png"/><br><img src="https://raw.githubusercontent.com/almightyYantao/blog-img/master/20230217103634.png"/></p><h3 id="2-、设置DNS牵引"><a href="#2-、设置DNS牵引" class="headerlink" title="(2)、设置DNS牵引"></a>(2)、设置DNS牵引</h3><p>应用路由 → DNS管控：海外域名是一个域名群组，可以自己修改<br>主要解决DNS污染问题，要不然可能部分网站会无法访问<br>这里有一个很注意的点，就是你的DNS，访问DNS的链路必须经过PA，否则牵引不会生效<br><img src="https://raw.githubusercontent.com/almightyYantao/blog-img/master/20230217103653.png"/></p><h3 id="3-、设置策略路由"><a href="#3-、设置策略路由" class="headerlink" title="(3)、设置策略路由"></a>(3)、设置策略路由</h3><p>应用路由 → 策略路由：我这边直接拿了飞连的609海外分流IP段进行分流，你也可以自己修改（文末下载）<br>主要为了只有需要海外的才出去，不能把所有的流量全部导出去<br><img src="https://raw.githubusercontent.com/almightyYantao/blog-img/master/20230217103713.png"/></p><h1 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h1><p>169IP段： <a href="https://www.123pan.com/s/cRk7Vv-frSsH">https://www.123pan.com/s/cRk7Vv-frSsH</a> 提取码:NzAF<br>Linux操作系统： <a href="https://www.123pan.com/s/cRk7Vv-arSsH">https://www.123pan.com/s/cRk7Vv-arSsH</a> 提取码:A5MC<br>joskmc： <a href="https://www.123pan.com/s/cRk7Vv-BrSsH">https://www.123pan.com/s/cRk7Vv-BrSsH</a> 提取码:kTu9</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;办公网每次去海外找资料都需要重新连接VPN，或者自己连接自己买的小飞机之类的才可以。但是这种在互联网公司内的话，非常的不友好；为公司工作还要自己花钱买小飞机～&lt;/p&gt;
&lt;p&gt;之前尝试过下面这种方式：&lt;br&gt;新增一台海外的机器（新加坡、香港）搭建SS&amp;#x2F;v2ray&amp;#x2F;trojan之类的协议，然后办公网新增一个软路由去连接，通过ACL把部分IP的用户跳转过去；&lt;br&gt;但是这种方式自己家里用用还行，如果想要在企业的办公网来使用的话，人一多就不行，因为所有人都从这个IP出去了，而且每次都需要命令行去操作ACL增加用户，非常的麻烦；&lt;/p&gt;</summary>
    
    
    
    
    <category term="办公网" scheme="https://almightyyantao.github.io/tags/%E5%8A%9E%E5%85%AC%E7%BD%91/"/>
    
    <category term="全球化" scheme="https://almightyyantao.github.io/tags/%E5%85%A8%E7%90%83%E5%8C%96/"/>
    
    <category term="全球办公" scheme="https://almightyyantao.github.io/tags/%E5%85%A8%E7%90%83%E5%8A%9E%E5%85%AC/"/>
    
    <category term="国际化" scheme="https://almightyyantao.github.io/tags/%E5%9B%BD%E9%99%85%E5%8C%96/"/>
    
    <category term="Panabit" scheme="https://almightyyantao.github.io/tags/Panabit/"/>
    
    <category term="iwan" scheme="https://almightyyantao.github.io/tags/iwan/"/>
    
    <category term="sd-wan" scheme="https://almightyyantao.github.io/tags/sd-wan/"/>
    
  </entry>
  
  <entry>
    <title>ss-tproxy 透明代理的设置方法</title>
    <link href="https://almightyyantao.github.io/2023/02/16/ssTproxyTransparentAgent/"/>
    <id>https://almightyyantao.github.io/2023/02/16/ssTproxyTransparentAgent/</id>
    <published>2023-02-15T16:00:00.000Z</published>
    <updated>2023-02-20T05:55:21.812Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><h2 id="1、什么是透明代理"><a href="#1、什么是透明代理" class="headerlink" title="1、什么是透明代理"></a>1、什么是透明代理</h2><p>在正向代理中，一个软件如果想走 client 的代理服务，我们必须显式配置该软件，对该软件来说，有没有走代理是很明确的，大家都“心知肚明”。而透明代理则与正向代理相反，当我们设置好合适的防火墙规则（仅以 Linux 的 iptables 为例），我们将不再需要显式配置这些软件来让其经过代理或者不经过代理（直连），因为这些软件发出的流量会自动被 iptables 规则所处理，那些我们认为需要代理的流量，会被通过合适的方法发送到 client 进程，而那些我们不需要代理的流量，则直接放行（直连）。这个过程对于我们使用的软件来说是完全透明的，软件自身对其一无所知。这就叫做 <strong>透明代理</strong>。注意，所谓透明是对我们使用的软件透明，而非对 client、server 或目标网站透明，理解这一点非常重要。</p><span id="more"></span><h2 id="2、透明代理的工作原理"><a href="#2、透明代理的工作原理" class="headerlink" title="2、透明代理的工作原理"></a>2、透明代理的工作原理</h2><p>在正向代理中，期望使用代理的软件会通过 http、socks5 协议与 client 进程进行交互，以此完成代理操作。而在透明代理中，我们的软件发出的流量是完全正常的流量，并没有像正向代理那样，使用 http、socks5 等专用协议，这些流量经过 iptables 规则的处理后，会被通过“合适的方法”发送给 client 进程（当然是指那些我们认为需要走代理的流量）。注意，此时 client 进程接收到不再是 http、socks5 协议数据，而是经过 iptables 处理的“透明代理数据”，“透明代理数据”从本质上来说与正常数据没有区别，只是多了一些“元数据”在里面，使得 client 进程可以通过 netfilter 或操作系统提供的 API 接口来获取这些元数据（元数据其实就是原始目的地址和原始目的端口）。那么这个“合适的方法”是什么？目前来说有两种：</p><ul><li>REDIRECT：只支持 TCP 协议的透明代理。</li><li>TPROXY：支持 TCP 和 UDP 协议的透明代理。</li></ul><p>因此，对于 TCP 透明代理，有两种实现方式，一种是 REDIRECT，一种是 TPROXY；而对于 UDP 透明代理，只能通过 TPROXY 方式来实现。为方便叙述，本文以 <strong>纯 TPROXY 模式</strong> 指代 TCP 和 UDP 都使用 TPROXY 来实现，以 <strong>REDIRECT + TPROXY 模式</strong> 指代 TCP 使用 REDIRECT 实现，而 UDP 使用 TPROXY 来实现，有时候简称 <strong>REDIRECT 模式</strong>，它们都是一个意思。</p><h1 id="二、Openvpn流量转发"><a href="#二、Openvpn流量转发" class="headerlink" title="二、Openvpn流量转发"></a>二、Openvpn流量转发</h1><p>采用：<a href="https://github.com/zfl9/ss-tproxy">https://github.com/zfl9/ss-tproxy</a><br>原理：openvpn → iptables → ss-redir</p><h1 id="三、部署方式"><a href="#三、部署方式" class="headerlink" title="三、部署方式"></a>三、部署方式</h1><h2 id="1、依赖检查"><a href="#1、依赖检查" class="headerlink" title="1、依赖检查"></a>1、依赖检查</h2><p>在部署之前，需要检查下当前自己的服务器依赖是否完整：<br>依赖安装地址：<a href="https://github.com/zfl9/ss-tproxy/wiki/Linux-%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86#%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96">https://github.com/zfl9/ss-tproxy/wiki/Linux-%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86#%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96</a></p><h2 id="2、脚本安装"><a href="#2、脚本安装" class="headerlink" title="2、脚本安装"></a>2、脚本安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https:``//github.com/zfl9/ss-tproxy</span><br><span class="line"><span class="built_in">cd</span> ss-tproxy</span><br><span class="line"><span class="built_in">chmod</span> +x ss-tproxy</span><br></pre></td></tr></table></figure><h3 id="install-可用的情况下（推荐）"><a href="#install-可用的情况下（推荐）" class="headerlink" title="install 可用的情况下（推荐）"></a>install 可用的情况下（推荐）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">install ss-tproxy /usr/local/bin</span><br><span class="line">install -d /etc/ss-tproxy</span><br><span class="line">install -m` `644` `ss-tproxy.conf gfwlist* chnroute* ignlist* /etc/ss-tproxy</span><br><span class="line">install -m` `644` `ss-tproxy.service /etc/systemd/system <span class="comment"># 可选，安装 service 文件</span></span><br></pre></td></tr></table></figure><h3 id="install-不可用"><a href="#install-不可用" class="headerlink" title="install 不可用"></a>install 不可用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -af ss-tproxy /usr/local/bin</span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/ss-tproxy</span><br><span class="line"><span class="built_in">cp</span> -af ss-tproxy.conf gfwlist* chnroute* ignlist* /etc/ss-tproxy</span><br><span class="line"><span class="built_in">cp</span> -af ss-tproxy.service /etc/systemd/system <span class="comment"># 可选，安装 service 文件</span></span><br></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight shell"><figcaption><span>/etc/ss-tproxy/ss-tproxy.conf >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mode</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">mode=<span class="string">&#x27;global&#x27;</span>  <span class="comment"># global 模式 (不分流)</span></span></span><br><span class="line">mode=&#x27;gfwlist&#x27; # gfwlist 模式 (黑名单)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">mode=<span class="string">&#x27;chnroute&#x27;</span> <span class="comment"># chnroute 模式 (白名单)</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ipv4/6</span></span><br><span class="line">ipv4=&#x27;true&#x27;     # true:启用ipv4透明代理; false:关闭ipv4透明代理</span><br><span class="line">ipv6=&#x27;false&#x27;    # true:启用ipv6透明代理; false:关闭ipv6透明代理</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tproxy</span></span><br><span class="line">tproxy=&#x27;false&#x27;  # true:TPROXY+TPROXY; false:REDIRECT+TPROXY</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tcponly</span></span><br><span class="line">tcponly=&#x27;false&#x27; # true:仅代理TCP流量; false:代理TCP和UDP流量</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">selfonly</span></span><br><span class="line">selfonly=&#x27;false&#x27; # true:仅代理本机流量; false:代理本机及&quot;内网&quot;流量</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">proxy</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">user/group(<span class="comment">#1,推荐) vs svraddr+port(#2), user/group选其中一个填写(不建议都填)</span></span></span><br><span class="line">proxy_procuser=&#x27;proxy&#x27;   # 本机代理进程的 user/uid，用来放行本机代理进程传出的流量</span><br><span class="line">proxy_procgroup=&#x27;&#x27;       # 本机代理进程的 group/gid，用来放行本机代理进程传出的流量</span><br><span class="line">proxy_svraddr4=()        # 服务器的 IPv4 地址或域名，允许填写多个服务器地址，空格隔开</span><br><span class="line">proxy_svraddr6=()        # 服务器的 IPv6 地址或域名，允许填写多个服务器地址，空格隔开</span><br><span class="line">proxy_svrport=&#x27;&#x27;         # 服务器的监听端口，可填多个端口，格式同 ipts_proxy_dst_port</span><br><span class="line">proxy_tcpport=&#x27;12121&#x27;    # ss/ssr/v2ray 等本机进程的 TCP 监听端口，该端口支持透明代理</span><br><span class="line">proxy_udpport=&#x27;12121&#x27;    # ss/ssr/v2ray 等本机进程的 UDP 监听端口，该端口支持透明代理</span><br><span class="line">proxy_startcmd=&#x27;(ss-redir -c /etc/shadowsocks-libev/config.json -u &lt;/dev/null &amp;&gt;&gt;/var/log/ss-redir.log &amp;)&#x27;     # 用于启动本机代理进程的 shell 命令，该命令应该能立即执行完毕</span><br><span class="line">proxy_stopcmd=&#x27;kill -9 $(pidof ss-redir)&#x27;      # 用于关闭本机代理进程的 shell 命令，该命令应该能立即执行完毕</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dns</span></span><br><span class="line">dns_direct=&#x27;223.5.5.5&#x27;                # 本地 IPv4 DNS，不能指定端口，也可以填组织、公司内部 DNS</span><br><span class="line">dns_direct6=&#x27;240C::6666&#x27;              # 本地 IPv6 DNS，不能指定端口，也可以填组织、公司内部 DNS</span><br><span class="line">dns_remote=&#x27;8.8.8.8#53&#x27;               # 远程 IPv4 DNS，必须指定端口，提示：访问远程 DNS 会走代理</span><br><span class="line">dns_remote6=&#x27;2001:4860:4860::8888#53&#x27; # 远程 IPv6 DNS，必须指定端口，提示：访问远程 DNS 会走代理</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dnsmasq</span></span><br><span class="line">dnsmasq_bind_port=&#x27;53&#x27;                  # dnsmasq 服务器监听端口，见 README</span><br><span class="line">dnsmasq_cache_size=&#x27;4096&#x27;               # DNS 缓存大小，大小为 0 表示禁用缓存</span><br><span class="line">dnsmasq_cache_time=&#x27;3600&#x27;               # DNS 缓存时间，单位是秒，最大 3600 秒</span><br><span class="line">dnsmasq_query_maxcnt=&#x27;1024&#x27;             # 设置并发 DNS 查询的最大数量，默认为 150</span><br><span class="line">dnsmasq_log_enable=&#x27;false&#x27;              # 记录详细日志，除非进行调试，否则不建议启用</span><br><span class="line">dnsmasq_log_file=&#x27;/var/log/dnsmasq.log&#x27; # 日志文件，如果不想保存日志可以改为 /dev/null</span><br><span class="line">dnsmasq_conf_dir=()                     # `--conf-dir` 选项的参数，可以填多个，空格隔开</span><br><span class="line">dnsmasq_conf_file=()                    # `--conf-file` 选项的参数，可以填多个，空格隔开</span><br><span class="line">dnsmasq_conf_string=()                  # 自定义配置，一个数组元素就是一行配置，空格隔开</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">chinadns</span></span><br><span class="line">chinadns_bind_port=&#x27;65353&#x27;               # chinadns-ng 服务器监听端口，通常不用改动</span><br><span class="line">chinadns_timeout=&#x27;5&#x27;                     # 等待上游 DNS 返回响应的超时时间，单位为秒</span><br><span class="line">chinadns_repeat=&#x27;1&#x27;                      # 向可信 DNS 发送几次 DNS 查询请求，默认为 1</span><br><span class="line">chinadns_fairmode=&#x27;true&#x27;                 # 使用公平模式，具体看 chinadns-ng 的 README</span><br><span class="line">chinadns_gfwlist_mode=&#x27;true&#x27;             # gfwlist 模式，加载 gfwlist.txt/gfwlist.ext</span><br><span class="line">chinadns_noip_as_chnip=&#x27;false&#x27;           # 启用 chinadns-ng 的 `--noip-as-chnip` 选项</span><br><span class="line">chinadns_verbose=&#x27;false&#x27;                 # 记录详细日志，除非进行调试，否则不建议启用</span><br><span class="line">chinadns_logfile=&#x27;/var/log/chinadns.log&#x27; # 日志文件，如果不想保存日志可以改为 /dev/null</span><br><span class="line">chinadns_privaddr4=()                    # IPv4 私有地址段，多个用空格隔开，具体见 README</span><br><span class="line">chinadns_privaddr6=()                    # IPv6 私有地址段，多个用空格隔开，具体见 README</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dns2tcp</span></span><br><span class="line">dns2tcp_bind_port=&#x27;65454&#x27;               # dns2tcp 转发服务器监听端口，如有冲突请修改</span><br><span class="line">dns2tcp_tcp_syncnt=&#x27;&#x27;                   # dns2tcp 的 `-s` 选项，留空表示不设置此选项</span><br><span class="line">dns2tcp_tcp_quickack=&#x27;false&#x27;            # dns2tcp 的 `-a` 选项，选项取值为true/false</span><br><span class="line">dns2tcp_tcp_fastopen=&#x27;false&#x27;            # dns2tcp 的 `-f` 选项，选项取值为true/false</span><br><span class="line">dns2tcp_verbose=&#x27;false&#x27;                 # 记录详细日志，除非进行调试，否则不建议启用</span><br><span class="line">dns2tcp_logfile=&#x27;/var/log/dns2tcp.log&#x27;  # 日志文件，如果不想保存日志可以改为 /dev/null</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ipts</span></span><br><span class="line">ipts_if_lo=&#x27;lo&#x27;                 # 环回接口的名称，在标准发行版中，通常为 lo，如果不是请修改</span><br><span class="line">ipts_rt_tab=&#x27;233&#x27;               # iproute2 路由表名或表 ID，除非产生冲突，否则不建议改动该选项</span><br><span class="line">ipts_rt_mark=&#x27;0x2333&#x27;           # iproute2 策略路由的防火墙标记，除非产生冲突，否则不建议改动该选项</span><br><span class="line">ipts_set_snat=&#x27;true&#x27;           # 设置 iptables 的 MASQUERADE 规则，布尔值，`true/false`，详见 README</span><br><span class="line">ipts_set_snat6=&#x27;false&#x27;          # 设置 ip6tables 的 MASQUERADE 规则，布尔值，`true/false`，详见 README</span><br><span class="line">ipts_reddns_onstop=&#x27;true&#x27;       # ss-tproxy stop 后，是否将其它主机发至本机的 DNS 重定向至直连 DNS，详见 README</span><br><span class="line">ipts_proxy_dst_port=&#x27;1:65535&#x27;   # 黑名单 IP 的哪些端口走代理，多个用逗号隔开，冒号为端口范围(含边界)，详见 README</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">opts</span></span><br><span class="line">opts_ss_netstat=&#x27;auto&#x27;                  # auto/ss/netstat，用哪个端口检测工具，见 README</span><br><span class="line">opts_ping_cmd_to_use=&#x27;auto&#x27;             # auto/standalone/parameter，ping 相关，见 README</span><br><span class="line">opts_hostname_resolver=&#x27;auto&#x27;           # auto/dig/getent/ping，用哪个解析工具，见 README</span><br><span class="line">opts_overwrite_resolv=&#x27;false&#x27;           # true/false/留空，如何操作 resolv.conf，见 README</span><br><span class="line">opts_ip_for_check_net=&#x27;223.5.5.5&#x27;       # 检测外网是否可访问的 IP，ping，留空表示跳过此检查</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">file</span></span><br><span class="line">file_gfwlist_txt=&#x27;/etc/ss-tproxy/gfwlist.txt&#x27;      # gfwlist/chnlist 模式预置文件</span><br><span class="line">file_gfwlist_ext=&#x27;/etc/ss-tproxy/gfwlist.ext&#x27;      # gfwlist/chnlist 模式扩展文件</span><br><span class="line">file_ignlist_ext=&#x27;/etc/ss-tproxy/ignlist.ext&#x27;      # global/chnroute 模式扩展文件</span><br><span class="line">file_chnroute_set=&#x27;/etc/ss-tproxy/chnroute.set&#x27;    # chnroute 地址段文件 (iptables)</span><br><span class="line">file_chnroute6_set=&#x27;/etc/ss-tproxy/chnroute6.set&#x27;  # chnroute6 地址段文件 (ip6tables)</span><br><span class="line">file_dnsserver_pid=&#x27;/etc/ss-tproxy/.dnsserver.pid&#x27; # dns 服务器进程的 pid 文件 (shell)</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主要放通下内网的访问，然后把MASQUERADE提前出来，要不然tcp的连接会回不来</span></span><br><span class="line">post_start()&#123;</span><br><span class="line">iptables -t nat -I PREROUTING -s 10.207.0.0/16 -d 10.0.0.0/8 -j ACCEPT</span><br><span class="line">iptables -t nat -I SSTP_POSTROUTING -s 10.207.0.0/16 -j MASQUERADE</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">post_stop()&#123;</span><br><span class="line">iptables -t nat -D PREROUTING -s 10.207.0.0/16 -d 10.0.0.0/8 -j ACCEPT</span><br><span class="line">iptables -t nat -D SSTP_POSTROUTING -s 10.207.0.0/16 -j MASQUERADE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下配置需要特别注意，如果不知道如何配置的，那么就按照我这么默认配置即可<br>具体配置介绍：<a href="https://github.com/zfl9/ss-tproxy#%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E">https://github.com/zfl9/ss-tproxy#%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E</a><br><img src="https://raw.githubusercontent.com/almightyYantao/blog-img/master/20230216143840.png"/><br><img src="https://raw.githubusercontent.com/almightyYantao/blog-img/master/20230216142810.png" /></p><h2 id="3、设置ss-libev代理"><a href="#3、设置ss-libev代理" class="headerlink" title="3、设置ss-libev代理"></a>3、设置ss-libev代理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#新版本(v4.``6.1``及以上)</span></span><br><span class="line"><span class="comment">#第一次运行时，请执行下面这两个操作</span></span><br><span class="line"><span class="comment">#``1``.创建proxy用户和组: useradd -Mr -d/tmp -s/bin/bash proxy</span></span><br><span class="line"><span class="comment">#``2``.授予透明代理相关权限: setcap cap_net_bind_service,cap_net_admin+ep /path/to/ss-redir</span></span><br><span class="line"><span class="comment">#&gt;&gt; 若setcap不可用，可使用suid权限位，此时需配置：proxy_procuser=``&#x27;&#x27;``、proxy_procgroup=``&#x27;proxy&#x27;</span></span><br><span class="line"><span class="comment">#&gt;&gt; 将所有者(组)改为root，并授予suid权限：chown root:root /path/to/ss-redir &amp;&amp; chmod` `4755` `/path/to/ss-redir</span></span><br><span class="line">proxy_procuser=``<span class="string">&#x27;proxy&#x27;</span></span><br><span class="line"><span class="comment">#proxy_startcmd=``&#x27;su proxy -c&quot;(ss-redir -c /etc/ss.json -u -v &lt;/dev/null &amp;&gt;&gt;/tmp/ss-redir.log &amp;)&quot;&#x27;` `# -v 表示记录详细日志</span></span><br><span class="line">proxy_startcmd=``<span class="string">&#x27;su proxy -c&quot;(ss-redir -c /etc/ss.json -u &lt;/dev/null &amp;&gt;&gt;/tmp/ss-redir.log &amp;)&quot;&#x27;</span>` `<span class="comment"># 这里就不记录详细日志了</span></span><br><span class="line">proxy_stopcmd=``<span class="string">&#x27;kill -9 $(pidof ss-redir)&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="黑名单、白名单说明"><a href="#黑名单、白名单说明" class="headerlink" title="黑名单、白名单说明"></a>黑名单、白名单说明</h2><ul><li>对于 global 模式，白名单文件为 <code>ignlist.ext</code>，没有黑名单文件，因为默认都走代理。</li><li>对于 gfwlist 模式，黑名单文件为 <code>gfwlist.txt/ext</code>，没有白名单文件，因为其它都走直连。</li><li>对于 chnroute 模式，白名单文件为 <code>ignlist.ext</code>，没有黑名单文件，但允许开启此功能，见下。<br>如果想让 chnroute 模式支持黑名单扩展，请打开 chinadns-ng 的 gfwlist 模式（<code>chinadns_gfwlist_mode</code>）；开启 gfwlist 模式后，chinadns-ng 会读取 <code>gfwlist.txt/ext</code> 黑名单文件中的<strong>域名模式</strong>；当 chinadns-ng 收到域名解析请求时，会先检查给定域名是否在黑名单中，如果是则只向可信 DNS 发出解析请求（也就是 <code>dns_remote/dns_remote6</code>），因此解析出来的会是国外 IP（不一定，具体要看给定域名的A&#x2F;AAAA记录以及其dns解析设定），然后当客户端访问该 IP 时就会走代理出去了（如果解析的地址是国外地址）。</li></ul><blockquote><p><code>chinadns_gfwlist_mode</code>的本意其实并不是为了支持’黑名单’，而是为了提高 chinadns-ng 的准确性，降低 dns 污染的可能性</p></blockquote><p>启动后，ss-tproxy会自动帮你做透明代理，会设置好iptables的配置，不需要在手工配置<br>同时ss-tproxy还提供勾子的形式，来帮助解决分流或者内网访问的一个方案，具体参考：</p><ul><li><a href="https://github.com/zfl9/ss-tproxy#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0">https://github.com/zfl9/ss-tproxy#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0</a></li><li><a href="https://github.com/zfl9/ss-tproxy#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0%E5%B0%8F%E6%8A%80%E5%B7%A7">https://github.com/zfl9/ss-tproxy#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0%E5%B0%8F%E6%8A%80%E5%B7%A7</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;

&lt;h1 id=&quot;一、介绍&quot;&gt;&lt;a href=&quot;#一、介绍&quot; class=&quot;headerlink&quot; title=&quot;一、介绍&quot;&gt;&lt;/a&gt;一、介绍&lt;/h1&gt;&lt;h2 id=&quot;1、什么是透明代理&quot;&gt;&lt;a href=&quot;#1、什么是透明代理&quot; class=&quot;headerlink&quot; title=&quot;1、什么是透明代理&quot;&gt;&lt;/a&gt;1、什么是透明代理&lt;/h2&gt;&lt;p&gt;在正向代理中，一个软件如果想走 client 的代理服务，我们必须显式配置该软件，对该软件来说，有没有走代理是很明确的，大家都“心知肚明”。而透明代理则与正向代理相反，当我们设置好合适的防火墙规则（仅以 Linux 的 iptables 为例），我们将不再需要显式配置这些软件来让其经过代理或者不经过代理（直连），因为这些软件发出的流量会自动被 iptables 规则所处理，那些我们认为需要代理的流量，会被通过合适的方法发送到 client 进程，而那些我们不需要代理的流量，则直接放行（直连）。这个过程对于我们使用的软件来说是完全透明的，软件自身对其一无所知。这就叫做 &lt;strong&gt;透明代理&lt;/strong&gt;。注意，所谓透明是对我们使用的软件透明，而非对 client、server 或目标网站透明，理解这一点非常重要。&lt;/p&gt;</summary>
    
    
    
    
    <category term="代理" scheme="https://almightyyantao.github.io/tags/%E4%BB%A3%E7%90%86/"/>
    
    <category term="透明代理" scheme="https://almightyyantao.github.io/tags/%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86/"/>
    
    <category term="vpn" scheme="https://almightyyantao.github.io/tags/vpn/"/>
    
    <category term="流量转发" scheme="https://almightyyantao.github.io/tags/%E6%B5%81%E9%87%8F%E8%BD%AC%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>清理自定义DHCP下发，异常断开导致IP地址占用的问题</title>
    <link href="https://almightyyantao.github.io/2023/02/16/openvpn/clearOpenvpnInvalidIp/"/>
    <id>https://almightyyantao.github.io/2023/02/16/openvpn/clearOpenvpnInvalidIp/</id>
    <published>2023-02-15T16:00:00.000Z</published>
    <updated>2023-02-20T05:36:13.844Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>因为OpenVpn存在断开重连的机制，如果突然出现网络抖动，用户端没有触发断开命令，但是同时又触发了重新连接的命令，这时候VPN这里就会重新给下发一个新的地址，但是老的地址不会回收掉，这个也是很早之前DHCP被用完的真正原因</p><span id="more"></span><h1 id="处理方式"><a href="#处理方式" class="headerlink" title="处理方式"></a>处理方式</h1><p>在每一台openvpn的机器上新增一个shell脚本做定时任务，每天临晨2点开始循环遍历</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">IFS=$<span class="string">&#x27;\n&#x27;</span> <span class="comment"># 修改默认分隔符</span></span><br><span class="line">OLDIFS=<span class="string">&quot;<span class="variable">$IFS</span>&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 清理无效的IP地址</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">clearIp</span></span>()&#123;</span><br><span class="line">    <span class="comment"># 取出当前已经分配下去的所有IP地址</span></span><br><span class="line">    result=$(curl -s <span class="string">&quot;后端获取当前使用IP的接口地址&quot;</span>);</span><br><span class="line">    ipList=`<span class="built_in">echo</span> <span class="variable">$result</span> | jq <span class="string">&#x27;.d.result&#x27;</span>`;</span><br><span class="line">    ipListLength=`<span class="built_in">echo</span> <span class="variable">$ipList</span> | jq <span class="string">&#x27;.|length&#x27;</span>`;</span><br><span class="line">    <span class="built_in">date</span>=`<span class="built_in">date</span> <span class="string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span>`</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 循环所有的数据</span></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> `<span class="built_in">seq</span> 0 <span class="variable">$ipListLength</span>`</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        ip=`<span class="built_in">echo</span> <span class="variable">$ipList</span> | jq -r <span class="string">&quot;.[<span class="variable">$index</span>].ip&quot;</span>`;</span><br><span class="line">        common_name=`<span class="built_in">echo</span> <span class="variable">$ipList</span> | jq -r <span class="string">&quot;.[<span class="variable">$index</span>].user&quot;</span>`</span><br><span class="line">        <span class="comment"># 拿到当前真正在使用的IP地址</span></span><br><span class="line">        useIp=`<span class="built_in">cat</span> /var/log/openvpn/status.log | grep CLIENT_LIST | awk <span class="string">&#x27;&#123;if (NR&gt;1)&#123;print $1&#125;&#125;&#x27;</span> | <span class="built_in">cut</span> -d <span class="string">&#x27;,&#x27;</span> -f 4`</span><br><span class="line">        <span class="comment"># 如果当前IP已经不在使用了，那么就需要释放，防止后期地址池不够用的情况</span></span><br><span class="line">        <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$&#123;useIp[@]&#125;</span>&quot;</span>  =~ <span class="string">&quot;<span class="variable">$&#123;ip&#125;</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;date&#125;</span> | <span class="variable">$&#123;ip&#125;</span> | 当前IP属于使用状态，无需释放&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            curl -s <span class="string">&quot;释放IP的接口地址&quot;</span> &gt;&gt; /var/log/openvpn/disconnect.log</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;date&#125;</span> | <span class="variable">$&#123;ip&#125;</span> | <span class="variable">$&#123;common_name&#125;</span> | 当前IP需要释放&quot;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 清理Iptable的规则</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">clearIptable</span></span>()&#123;</span><br><span class="line">    iptableResult=($(iptables -L | grep 10.207 | grep ACCEPT | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span>))</span><br><span class="line">    iptableResultCount=($(iptables -L | grep 10.207 | grep ACCEPT | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | <span class="built_in">wc</span> -l))</span><br><span class="line">    <span class="built_in">date</span>=`<span class="built_in">date</span> <span class="string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span>`</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> <span class="variable">$&#123;iptableResult[@]&#125;</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        ip=`<span class="built_in">echo</span> <span class="variable">$item</span> | <span class="built_in">cut</span> -d <span class="string">&#x27;-&#x27;</span> -f 2`</span><br><span class="line">        common_name=`<span class="built_in">echo</span> <span class="variable">$item</span> | <span class="built_in">cut</span> -d <span class="string">&#x27;-&#x27;</span> -f 1`</span><br><span class="line">        ifconfig_pool_remote_ip=<span class="variable">$ip</span></span><br><span class="line">        useIp=`<span class="built_in">cat</span> /var/log/openvpn/status.log | grep CLIENT_LIST | awk <span class="string">&#x27;&#123;if (NR&gt;1)&#123;print $1&#125;&#125;&#x27;</span> | <span class="built_in">cut</span> -d <span class="string">&#x27;,&#x27;</span> -f 4`</span><br><span class="line">        <span class="comment"># 如果当前IP已经不在使用了，那么就需要释放，防止后期地址池不够用的情况</span></span><br><span class="line">        <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$&#123;useIp[@]&#125;</span>&quot;</span>  =~ <span class="string">&quot;<span class="variable">$&#123;ip&#125;</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;date&#125;</span> | <span class="variable">$&#123;ip&#125;</span> | 当前IP属于使用状态，无需释放&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;date&#125;</span> | <span class="variable">$&#123;ifconfig_pool_remote_ip&#125;</span> | <span class="variable">$&#123;common_name&#125;</span> | 当前IP需要释放&quot;</span></span><br><span class="line">            /sbin/iptables -D FORWARD -s <span class="variable">$ifconfig_pool_remote_ip</span> -m <span class="built_in">set</span> --match-set <span class="variable">$&#123;common_name&#125;</span>-<span class="variable">$&#123;ifconfig_pool_remote_ip&#125;</span> dst -j ACCEPT</span><br><span class="line">            /sbin/iptables -D FORWARD -s <span class="variable">$ifconfig_pool_remote_ip</span> -m <span class="built_in">set</span> --match-set <span class="variable">$&#123;common_name&#125;</span>-<span class="variable">$&#123;ifconfig_pool_remote_ip&#125;</span>-drop dst -j DROP</span><br><span class="line">            /sbin/iptables -D FORWARD -s <span class="variable">$ifconfig_pool_remote_ip</span> -j DROP</span><br><span class="line">            /sbin/ipset destroy <span class="variable">$&#123;common_name&#125;</span>-<span class="variable">$&#123;ifconfig_pool_remote_ip&#125;</span></span><br><span class="line">            /sbin/ipset destroy <span class="variable">$&#123;common_name&#125;</span>-<span class="variable">$&#123;ifconfig_pool_remote_ip&#125;</span>-drop</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">clearIp()</span><br><span class="line">clearIptable()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;因为OpenVpn存在断开重连的机制，如果突然出现网络抖动，用户端没有触发断开命令，但是同时又触发了重新连接的命令，这时候VPN这里就会重新给下发一个新的地址，但是老的地址不会回收掉，这个也是很早之前DHCP被用完的真正原因&lt;/p&gt;</summary>
    
    
    
    
    <category term="openvpn" scheme="https://almightyyantao.github.io/tags/openvpn/"/>
    
    <category term="dhcp" scheme="https://almightyyantao.github.io/tags/dhcp/"/>
    
  </entry>
  
  <entry>
    <title>openvpn动态下发权限</title>
    <link href="https://almightyyantao.github.io/2022/12/14/openvpn/openvpn-dynamic-route-permissions/"/>
    <id>https://almightyyantao.github.io/2022/12/14/openvpn/openvpn-dynamic-route-permissions/</id>
    <published>2022-12-13T16:00:00.000Z</published>
    <updated>2023-02-20T05:36:03.110Z</updated>
    
    <content type="html"><![CDATA[<h2 id="首先了解我们为什么要动态下发"><a href="#首先了解我们为什么要动态下发" class="headerlink" title="首先了解我们为什么要动态下发"></a>首先了解我们为什么要动态下发</h2><ul><li>开源的openvpn并不支持权限管理，大部分在做权限管理的时候使用的都是根据来源IP或IP段通过iptables&#x2F;交换机来进行权限控制</li><li>权限控制太广了，根本无法很好的去做管理后台的配置，特别是需要用户组来进行区分的时候，那就更困难了<span id="more"></span></li></ul><h2 id="权限下发的逻辑"><a href="#权限下发的逻辑" class="headerlink" title="权限下发的逻辑"></a>权限下发的逻辑</h2><img  src=http://www.plantuml.com/plantuml/svg/Kr3WAiaioKbLo2z8pIiho7knVzwplgNFb-nwrjB_TFO-hkTJLZphsAwWQmTJOFMoOTQB_UrFMzSytpiHeXegmmMbTUrWIf_iw7xQFz4puEcS3K_dDhpVq_DYtRxdUzSzxLhnhA7nsTpcbpCd83H1RB9wkgxdMSS4YC40><h2 id="用到的技术"><a href="#用到的技术" class="headerlink" title="用到的技术"></a>用到的技术</h2><ul><li>ipset</li><li>iptables</li></ul><h2 id="主要脚本内容"><a href="#主要脚本内容" class="headerlink" title="主要脚本内容"></a>主要脚本内容</h2><h3 id="连接脚本"><a href="#连接脚本" class="headerlink" title="连接脚本"></a>连接脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/sbin/ipset create <span class="variable">$&#123;common_name&#125;</span>-<span class="variable">$&#123;common_ip&#125;</span> <span class="built_in">hash</span>:ip</span><br><span class="line">/sbin/ipset create <span class="variable">$&#123;common_name&#125;</span>-<span class="variable">$&#123;common_ip&#125;</span>-drop <span class="built_in">hash</span>:ip</span><br><span class="line"><span class="comment"># 这里是动态去你的后端获取出来的允许访问的列表，接口自己去实现</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> `<span class="built_in">seq</span> 0 <span class="variable">$permissionsAcceptLength</span>`; <span class="keyword">do</span></span><br><span class="line">    /sbin/ipset add <span class="variable">$&#123;common_name&#125;</span>-<span class="variable">$&#123;common_ip&#125;</span> <span class="variable">$&#123;permissionsAccept[$index]//\&quot;/&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> `<span class="built_in">seq</span> 0 <span class="variable">$permissionsDropLength</span>`; <span class="keyword">do</span></span><br><span class="line">    /sbin/ipset add <span class="variable">$&#123;common_name&#125;</span>-<span class="variable">$&#123;common_ip&#125;</span>-drop <span class="variable">$&#123;permissionsDrop[$index]//\&quot;/&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># 设置iptables</span></span><br><span class="line">/sbin/iptables -A FORWARD -s <span class="variable">$common_ip</span> -m <span class="built_in">set</span> --match-set <span class="variable">$&#123;common_name&#125;</span>-<span class="variable">$&#123;common_ip&#125;</span> dst -j ACCEPT</span><br><span class="line">/sbin/iptables -A FORWARD -s <span class="variable">$common_ip</span> -m <span class="built_in">set</span> --match-set <span class="variable">$&#123;common_name&#125;</span>-<span class="variable">$&#123;common_ip&#125;</span>-drop dst -j DROP</span><br><span class="line">/sbin/iptables -A FORWARD -s <span class="variable">$common_ip</span> -j DROP</span><br></pre></td></tr></table></figure><h3 id="断开脚本"><a href="#断开脚本" class="headerlink" title="断开脚本"></a>断开脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/sbin/iptables -D FORWARD -s <span class="variable">$ifconfig_pool_remote_ip</span> -m <span class="built_in">set</span> --match-set <span class="variable">$&#123;common_name&#125;</span>-<span class="variable">$&#123;ifconfig_pool_remote_ip&#125;</span> dst -j ACCEPT</span><br><span class="line">/sbin/iptables -D FORWARD -s <span class="variable">$ifconfig_pool_remote_ip</span> -m <span class="built_in">set</span> --match-set <span class="variable">$&#123;common_name&#125;</span>-<span class="variable">$&#123;ifconfig_pool_remote_ip&#125;</span>-drop dst -j DROP</span><br><span class="line">/sbin/iptables -D FORWARD -s <span class="variable">$ifconfig_pool_remote_ip</span> -j DROP</span><br><span class="line">/sbin/ipset destroy <span class="variable">$&#123;common_name&#125;</span>-<span class="variable">$&#123;ifconfig_pool_remote_ip&#125;</span></span><br><span class="line">/sbin/ipset destroy <span class="variable">$&#123;common_name&#125;</span>-<span class="variable">$&#123;ifconfig_pool_remote_ip&#125;</span>-drop</span><br></pre></td></tr></table></figure><h2 id="如果在运行的过程中出现脚本权限不足"><a href="#如果在运行的过程中出现脚本权限不足" class="headerlink" title="如果在运行的过程中出现脚本权限不足"></a>如果在运行的过程中出现脚本权限不足</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 766 connect.sh disconnect.sh</span><br><span class="line"><span class="built_in">chmod</span> a+x connect.sh disconnect.sh</span><br><span class="line"><span class="built_in">chmod</span> +s connect.sh disconnect.sh</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;首先了解我们为什么要动态下发&quot;&gt;&lt;a href=&quot;#首先了解我们为什么要动态下发&quot; class=&quot;headerlink&quot; title=&quot;首先了解我们为什么要动态下发&quot;&gt;&lt;/a&gt;首先了解我们为什么要动态下发&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;开源的openvpn并不支持权限管理，大部分在做权限管理的时候使用的都是根据来源IP或IP段通过iptables&amp;#x2F;交换机来进行权限控制&lt;/li&gt;
&lt;li&gt;权限控制太广了，根本无法很好的去做管理后台的配置，特别是需要用户组来进行区分的时候，那就更困难了</summary>
    
    
    
    
    <category term="openvpn" scheme="https://almightyyantao.github.io/tags/openvpn/"/>
    
    <category term="权限" scheme="https://almightyyantao.github.io/tags/%E6%9D%83%E9%99%90/"/>
    
    <category term="动态下发" scheme="https://almightyyantao.github.io/tags/%E5%8A%A8%E6%80%81%E4%B8%8B%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>zabbix 警报推送至企业微信（图文版）</title>
    <link href="https://almightyyantao.github.io/2022/12/13/zabbix/zabbix-wecom/"/>
    <id>https://almightyyantao.github.io/2022/12/13/zabbix/zabbix-wecom/</id>
    <published>2022-12-13T07:05:23.172Z</published>
    <updated>2023-02-20T05:36:43.852Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新增Python脚本"><a href="#新增Python脚本" class="headerlink" title="新增Python脚本"></a>新增Python脚本</h2><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&#x27;http://10.1.1.59/zabbix/api_jsonrpc.php&#x27;</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json-rpc&#x27;</span>&#125;</span><br><span class="line">graph_path = <span class="string">&#x27;/data/zabbix/images/&#x27;</span>  <span class="comment"># 定义图片存储路径</span></span><br><span class="line">graph_url = <span class="string">&#x27;http://10.1.1.59/zabbix/chart.php&#x27;</span>  <span class="comment"># 定义图表的url</span></span><br><span class="line">loginurl = <span class="string">&quot;http://10.1.1.59/zabbix/index.php&quot;</span>  <span class="comment"># 定义登录的url</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uploadImg</span>(<span class="params">path,accessToken</span>):</span><br><span class="line">    <span class="comment">#img_url = &quot;https://qyapi.weixin.qq.com/cgi-bin/webhook/upload_media?key=&quot; + key + &quot;&amp;type=file&quot;</span></span><br><span class="line">    img_url = <span class="string">&quot;https://qyapi.weixin.qq.com/cgi-bin/media/uploadimg?access_token=&quot;</span>+accessToken</span><br><span class="line">    files = &#123;<span class="string">&#x27;media&#x27;</span>: <span class="built_in">open</span>(path, <span class="string">&#x27;rb&#x27;</span>)&#125;</span><br><span class="line">    r = requests.post(img_url, files=files)</span><br><span class="line">    re = json.loads(r.text)</span><br><span class="line">    <span class="built_in">print</span>(re)</span><br><span class="line">    <span class="keyword">return</span> re[<span class="string">&#x27;url&#x27;</span>]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_itemid</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="comment">#print(message)</span></span><br><span class="line">    itemid = re.search(<span class="string">r&#x27;ITEMID:(\d+)&#x27;</span>, message).group(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">#itemid = 1</span></span><br><span class="line">    <span class="keyword">return</span> itemid</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_imgUrl</span>(<span class="params">itemid</span>):</span><br><span class="line">    session = requests.Session()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        loginheaders = &#123;</span><br><span class="line">            <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;10.1.1.59&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 定义请求消息头</span></span><br><span class="line"> </span><br><span class="line">        payload = &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&#x27;yantao&#x27;</span>,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="string">&#x27;xxxxxxx&#x27;</span>,</span><br><span class="line">            <span class="string">&quot;autologin&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;enter&quot;</span>: <span class="string">&quot;Sign in&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 定义传入的data</span></span><br><span class="line">        login = session.post(url=loginurl, headers=loginheaders, data=payload)</span><br><span class="line">        <span class="built_in">print</span>(login)</span><br><span class="line">        graph_params = &#123;</span><br><span class="line">            <span class="string">&quot;from&quot;</span>: <span class="string">&quot;now-10m&quot;</span>,</span><br><span class="line">            <span class="string">&quot;to&quot;</span>: <span class="string">&quot;now&quot;</span>,</span><br><span class="line">            <span class="string">&quot;itemids&quot;</span>: itemid,</span><br><span class="line">            <span class="string">&quot;width&quot;</span>: <span class="string">&quot;400&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 定义获取图片的参数</span></span><br><span class="line">        graph_req = session.get(url=graph_url, params=graph_params)</span><br><span class="line">        <span class="comment"># 发送get请求获取图片数据</span></span><br><span class="line">        time_tag = time.strftime(<span class="string">&quot;%Y%m%d%H%M%S&quot;</span>, time.localtime())</span><br><span class="line">        graph_name = <span class="string">&#x27;baojing_&#x27;</span> + time_tag + <span class="string">&#x27;.png&#x27;</span></span><br><span class="line">        <span class="comment"># 用报警时间来作为图片名进行保存</span></span><br><span class="line">        graph_name = os.path.join(graph_path, graph_name)</span><br><span class="line">        <span class="comment"># 使用绝对路径保存图片</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(graph_name, <span class="string">&#x27;wb&#x27;</span>, ) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(graph_req.content)</span><br><span class="line">            <span class="comment"># 将获取到的图片数据写入到文件中去</span></span><br><span class="line">        <span class="keyword">return</span> graph_name</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getAccessToken</span>():</span><br><span class="line">    api_url = <span class="string">&quot;https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=corpid&amp;corpsecret=corpsecret&quot;</span></span><br><span class="line">    content = requests.get(api_url)</span><br><span class="line">    <span class="comment">#print(content.json())</span></span><br><span class="line">    <span class="keyword">return</span> content.json().get(<span class="string">&quot;access_token&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getImgUrl</span>(<span class="params">mediaId,accessToken</span>):</span><br><span class="line">    api_url = <span class="string">&quot;https://qyapi.weixin.qq.com/cgi-bin/media/get?access_token=&quot;</span>+accessToken+<span class="string">&quot;&amp;media_id=&quot;</span>+mediaId</span><br><span class="line">    content = requests.get(api_url)</span><br><span class="line">    <span class="built_in">print</span>(mediaId)</span><br><span class="line">    <span class="built_in">print</span>(content.json())</span><br><span class="line">    <span class="keyword">return</span> content.json().get(<span class="string">&quot;url&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_message</span>(<span class="params">imgUrl,title,desc,openUrl,key</span>):</span><br><span class="line">    <span class="comment"># 发送消息</span></span><br><span class="line">    url = <span class="string">&quot;https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=&quot;</span> + key</span><br><span class="line">    <span class="comment"># message = title  # sys.argv[3]</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;msgtype&quot;</span>: <span class="string">&quot;template_card&quot;</span>,</span><br><span class="line">        <span class="string">&quot;template_card&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;card_type&quot;</span>: <span class="string">&quot;news_notice&quot;</span>,</span><br><span class="line">            <span class="string">&quot;source&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;Zabbix网络警报&quot;</span>,</span><br><span class="line">                <span class="string">&quot;desc_color&quot;</span>: <span class="number">0</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;main_title&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;title&quot;</span>:<span class="string">&quot;Zabbix网络警报&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;quote_area&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="string">&quot;quote_text&quot;</span>:desc</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;card_image&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;url&quot;</span>: imgUrl</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;card_action&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="string">&quot;url&quot;</span>: openUrl,</span><br><span class="line">                <span class="string">&quot;appid&quot;</span>: <span class="string">&quot;APPID&quot;</span>,</span><br><span class="line">                <span class="string">&quot;pagepath&quot;</span>: <span class="string">&quot;PAGEPATH&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    req = requests.post(url, data=json.dumps(params))</span><br><span class="line">    <span class="built_in">print</span>(req.json())</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    message = sys.argv[<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(message)</span><br><span class="line">    itemid = get_itemid(message)</span><br><span class="line">    imgpath = get_imgUrl(itemid)</span><br><span class="line">    accessToken = getAccessToken();</span><br><span class="line">    imgUrl = uploadImg(imgpath,accessToken)</span><br><span class="line">    <span class="comment">#print(itemid)</span></span><br><span class="line">    <span class="comment">#print(imgpath)</span></span><br><span class="line">    <span class="built_in">print</span>(imgUrl)</span><br><span class="line">    send_message(imgUrl,sys.argv[<span class="number">2</span>],sys.argv[<span class="number">3</span>],imgUrl,sys.argv[<span class="number">4</span>])</span><br><span class="line">    <span class="comment">#accessToken = getAccessToken()</span></span><br></pre></td></tr></table></figure><h2 id="新增SH脚本"><a href="#新增SH脚本" class="headerlink" title="新增SH脚本"></a>新增SH脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo $1 &gt;&gt; /data/zabbix/log.log</span><br><span class="line">python /usr/lib/zabbix/alertscripts/wxcom.py $1 $2 $3 $4</span><br></pre></td></tr></table></figure><p>把两个文件都放到这个目录下：&#x2F;usr&#x2F;lib&#x2F;zabbix&#x2F;alertscripts&#x2F;</p><h2 id="配置媒介"><a href="#配置媒介" class="headerlink" title="配置媒介"></a>配置媒介</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;新增Python脚本&quot;&gt;&lt;a href=&quot;#新增Python脚本&quot; class=&quot;headerlink&quot; title=&quot;新增Python脚本&quot;&gt;&lt;/a&gt;新增Python脚本&lt;/h2&gt;</summary>
    
    
    
    
    <category term="zabbix" scheme="https://almightyyantao.github.io/tags/zabbix/"/>
    
    <category term="企业微信" scheme="https://almightyyantao.github.io/tags/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1/"/>
    
    <category term="报警" scheme="https://almightyyantao.github.io/tags/%E6%8A%A5%E8%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>安装&amp;破解Openvpn Access Server</title>
    <link href="https://almightyyantao.github.io/2022/12/13/openvpn/openvpn-access-server/"/>
    <id>https://almightyyantao.github.io/2022/12/13/openvpn/openvpn-access-server/</id>
    <published>2022-12-13T07:02:54.232Z</published>
    <updated>2023-02-20T05:36:09.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在线安装（需要翻墙）"><a href="#在线安装（需要翻墙）" class="headerlink" title="在线安装（需要翻墙）"></a>在线安装（需要翻墙）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install https://as-repository.openvpn.net/as-repo-centos7.rpm</span><br><span class="line">yum -y install openvpn-as</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="管理员登录"><a href="#管理员登录" class="headerlink" title="管理员登录"></a>管理员登录</h2><p>首先需要修改管理员密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd openvpn</span><br></pre></td></tr></table></figure><p>输入之后可以登录管理员页面了。</p><p>如果密码一直错误的话，说明修改失败了，可以查看下原来的密码是什么</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /usr/local/openvpn_as/init.log</span><br></pre></td></tr></table></figure><p>登录后点击User Management–&gt;User Permissions 添加用户</p><h2 id="破解用户数"><a href="#破解用户数" class="headerlink" title="破解用户数"></a>破解用户数</h2><ul><li>主要操作的文件是一个名叫 <code>pyovpn-2.0-pyx.x.egg</code> 的文件，以我了解的情况来看，从 <code>2.5.0</code> 到 <code>2.9.x</code> 文件名一直都是这个，只是不同版本里面的内容不一样.</li><li>这个文件有点类似 <code>Java</code> 当中的 <code>jar</code> 库文件，也是一个 <code>zip</code> 压缩文件，里面包含了一些 <code>Python</code> 的字节码文件.</li><li>破解的原理大概是在 <code>Python</code> 中采用类似 <code>Java</code> 动态代理的技术，将原本读取用户属性的调用返回值拦截，修改用户限制数量再返回.</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p><code>2.9.0</code> 以下版本破解的目标文件是 <code>/pyovpn/lic/uprop.pyo</code>, <code>2.9.0</code> 及以上是 <code>/pyovpn/lic/uprop.pyc</code>; 按照网上流行的破解方法，把这个文件解压出来并改名为 <code>uprop2.pyo</code> 或 <code>uprop2.pyc</code>, 然后新建一个 <code>uprop.py</code> 文件，内容如下:</p><p><code>**2.9.0**</code><strong>以下版本内容:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import uprop2</span><br><span class="line">old_figure = None</span><br><span class="line"></span><br><span class="line">def new_figure(self, licdict):</span><br><span class="line">    ret = old_figure(self, licdict)</span><br><span class="line">    ret[&#x27;concurrent_connections&#x27;] = 1024</span><br><span class="line">    return ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for x in dir(uprop2):</span><br><span class="line">    if x[:2] == &#x27;__&#x27;:</span><br><span class="line">        continue</span><br><span class="line">    if x == &#x27;UsageProperties&#x27;:</span><br><span class="line">        exec(&#x27;old_figure = uprop2.UsageProperties.figure&#x27;)</span><br><span class="line">        exec(&#x27;uprop2.UsageProperties.figure = new_figure&#x27;)</span><br><span class="line">    exec(&#x27;%s = uprop2.%s&#x27; % (x, x))</span><br></pre></td></tr></table></figure><p><code>**2.9.0**</code><strong>及以上版本内容:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from pyovpn.lic import uprop2</span><br><span class="line">old_figure = None</span><br><span class="line"></span><br><span class="line">def new_figure(self, licdict):</span><br><span class="line">    ret = old_figure(self, licdict)</span><br><span class="line">    ret[&#x27;concurrent_connections&#x27;] = 1024</span><br><span class="line">    return ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for x in dir(uprop2):</span><br><span class="line">    if x[:2] == &#x27;__&#x27;:</span><br><span class="line">        continue</span><br><span class="line">    if x == &#x27;UsageProperties&#x27;:</span><br><span class="line">        exec(&#x27;old_figure = uprop2.UsageProperties.figure&#x27;)</span><br><span class="line">        exec(&#x27;uprop2.UsageProperties.figure = new_figure&#x27;)</span><br><span class="line">    exec(&#x27;%s = uprop2.%s&#x27; % (x, x))</span><br></pre></td></tr></table></figure><p>再将上面的 <code>uprop.py</code> 编译为库文件 <code>uprop.pyo</code> 或 <code>uprop.pyc</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt;2.9.0</span></span><br><span class="line">python2 -O -m compileall uprop.py</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&gt;=2.9.0</span></span><br><span class="line">python3 -O -m compileall uprop.py &amp;&amp; mv __pycache__/uprop.cpython-37.opt-1.pyc uprop.pyc</span><br></pre></td></tr></table></figure><blockquote><p>注意 <code>uprop.cpython-37.opt-1.pyc</code> 文件名会随着 <code>python</code> 版本变化而变化.</p></blockquote><p>现在我们得到了一个改文件名的文件 <code>uprop2.pyo</code> 或 <code>uprop2.pyc</code>, 和一个编译出来的 <code>uprop.pyo</code> 或 <code>uprop.pyc</code>; 把这两个文件压缩到 <code>pyovpn-2.0-pyx.x.egg</code> 的 <code>/pyovpn/lic/</code> 目录下，然后去服务器替换目标文件，重启服务就 OK 了.</p><h2 id="所有的操作命令"><a href="#所有的操作命令" class="headerlink" title="所有的操作命令"></a>所有的操作命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把操作的文件复制出来到另外的一个文件夹下面操作</span></span><br><span class="line">cd /usr/local/openvpn_as/lib/python &amp; mkdir pojie &amp; cp python/pyovpn-2.0-py3.6.egg ./pojie &amp; cd pojie/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">改一个文件名，防止后面打包的时候把源文件覆盖了</span></span><br><span class="line">mv pyovpn-2.0-py3.6.egg pyovpn-2.0-py3.6.egg.bak &amp; unzip pyovpn-2.0-py3.6.egg.bak</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入到需要修改的目录</span></span><br><span class="line">cd pyovpn/lic</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制源文件改名</span></span><br><span class="line">mv uprop.pyc uprop2.pyc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新增一个py文件，然后把文件内容复制进去，并保存</span></span><br><span class="line">vi uprop.py</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退到 pojie 文件夹，进行打包</span></span><br><span class="line">zip -r pyovpn-2.0-py3.6.egg EGG-INFO/ common/ pyovpn/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制文件到运行目录，覆盖</span></span><br><span class="line">cp pyovpn-2.0-py3.6.egg /usr/local/openvpn_as/lib/python</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启服务</span></span><br><span class="line">systemctl restart openvpnas</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;在线安装（需要翻墙）&quot;&gt;&lt;a href=&quot;#在线安装（需要翻墙）&quot; class=&quot;headerlink&quot; title=&quot;在线安装（需要翻墙）&quot;&gt;&lt;/a&gt;在线安装（需要翻墙）&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum -y install https://as-repository.openvpn.net/as-repo-centos7.rpm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum -y install openvpn-as&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="openvpn" scheme="https://almightyyantao.github.io/tags/openvpn/"/>
    
    <category term="2.9.0" scheme="https://almightyyantao.github.io/tags/2-9-0/"/>
    
    <category term="openvpn access server" scheme="https://almightyyantao.github.io/tags/openvpn-access-server/"/>
    
    <category term="破解" scheme="https://almightyyantao.github.io/tags/%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>通过 Haproxy 实现 Shadowshadows 负载均衡</title>
    <link href="https://almightyyantao.github.io/2022/12/13/haproxy-load/"/>
    <id>https://almightyyantao.github.io/2022/12/13/haproxy-load/</id>
    <published>2022-12-13T05:36:56.278Z</published>
    <updated>2023-02-20T05:35:56.795Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>缺点：所有的SS的加密方式和密码必须一致<br>介绍：HAProxy是一个使用C语言编写的自由及开放原始码软件，其提供高可用性、负载均衡，以及基于TCP和HTTP的应用程序代理。</p><span id="more"></span><h2 id="安装Haproxy"><a href="#安装Haproxy" class="headerlink" title="安装Haproxy"></a>安装Haproxy</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install haproxy</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">global</span><br><span class="line">    chroot  /var/lib/haproxy</span><br><span class="line">    pidfile /var/run/haproxy.pid</span><br><span class="line">    user    haproxy</span><br><span class="line">    group   haproxy</span><br><span class="line">defaults</span><br><span class="line">    mode    tcp                         #服务器默认的工作模式</span><br><span class="line">    balance roundrobin                  #服务器默认使用的均衡模式</span><br><span class="line">    retries 3                           #三次连接失败表示服务器不可用</span><br><span class="line">    maxconn 5000                        #最大连接数</span><br><span class="line">    timeout connect 500ms               #连接超时</span><br><span class="line">    timeout client  3s                  #客户端超时</span><br><span class="line">    timeout server  3s                  #服务器超时</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">listen WebPanel</span><br><span class="line">    mode    http                        #这里使用HTTP模式</span><br><span class="line">    bind    10.1.1.58:9595               #WEB服务端口</span><br><span class="line">    stats   refresh 5s                  #自动刷新时间</span><br><span class="line">    stats   uri  /                      #WEB管理地址</span><br><span class="line">    stats   auth admin:xxxx         #账号密码</span><br><span class="line">    stats   hide-version                #隐藏版本</span><br><span class="line">    stats   admin if TRUE               #验证通过则赋予管理权</span><br><span class="line"></span><br><span class="line">frontend shadowsocks-in</span><br><span class="line">    bind *:50001</span><br><span class="line">    default_backend servers</span><br><span class="line"></span><br><span class="line">backend servers</span><br><span class="line">    mode tcp</span><br><span class="line">    balance roundrobin</span><br><span class="line">    # option external-check</span><br><span class="line">    option tcp-check</span><br><span class="line">    # external-check command &quot;/etc/haproxy/haproxy-shadowsocks-checker.py&quot;</span><br><span class="line"></span><br><span class="line">    server ss1 43.156.100.84:2195 check inter 500 rise 2 fall 4 weight 100   #SS/SSR服务器地址与端口</span><br><span class="line">    server ss2 42.157.192.42:10108 check inter 500 rise 2 fall 4 weight 100</span><br></pre></td></tr></table></figure><p><code>server</code>：后面首先跟名字，名字随便起呗，自己能够区分就行。紧接着跟SS的公网IP+端口，端口也就是SS&#x2F;SSR的端口。<br><code>check</code>：是检测的意思，这段配置很重要<br><code>inter</code>：单位毫秒，我配置的500，即500毫秒检测一次目标服务器。<br><code>rise2</code>：设定健康状态检查中，某离线的服务器从离线状态转换至正常状态需要成功检查的次数，这里我设置的2次。<br><code>fall4</code>：确认服务器从正常状态转换为不可用状态需要检查的次数，这里是4次。<br><code>weight</code>：权重，值越大代表这台机器工作的机会越多，这里我们可以把一台线路较好的机器的权重设置高一些。<br><code>balance</code>：负载均衡方式</p><ul><li>roundrobin：基于权重进行轮叫，在服务器的处理时间保持均匀分布时，这是最平衡、最公平的算法。此算法是动态的，这表示其权重可以在运行时进行调整，不过，在设计上，每个后端服务器仅能最多接受4128个连接；</li><li>static-rr：基于权重进行轮叫，与roundrobin类似，但是为静态方法，在运行时调整其服务器权重不会生效；不过，其在后端服务器连接数上没有限制；</li><li>leastconn：新的连接请求被派发至具有最少连接数目的后端服务器；在有着较长时间会话的场景中推荐使用此算法，如LDAP、SQL等，其并不太适用于较短会话的应用层协议，如HTTP；此算法是动态的，可以在运行时调整其权重；</li><li>source：将请求的源地址进行hash运算，并由后端服务器的权重总数相除后派发至某匹配的服务器；这可以使得同一个客户端IP的请求始终被派发至某特定的服务器；不过，当服务器权重总数发生变化时，如某服务器宕机或添加了新的服务器，许多客户端的请求可能会被派发至与此前请求不同的服务器；常用于 负载均衡无cookie功能的基于TCP的协议；其默认为静态，不过也可以使用hash-type修改此特性；</li></ul><h2 id="修改Shadowsocks配置"><a href="#修改Shadowsocks配置" class="headerlink" title="修改Shadowsocks配置"></a>修改Shadowsocks配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;127.0.0.1&quot;, # 这里改成Haproxy的地址</span><br><span class="line">    &quot;server_port&quot;:50001, # 这里改成Haproxy监听的端口</span><br><span class="line">    &quot;local_port&quot;:1080, # 这里本地监听端口</span><br><span class="line">    &quot;password&quot;:&quot;qunheadmin&quot;,</span><br><span class="line">    &quot;timeout&quot;:60,</span><br><span class="line">    &quot;method&quot;:&quot;aes-256-gcm&quot;,</span><br><span class="line">    &quot;mode&quot;:&quot;tcp_and_udp&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">HAProxy是一个使用C语言编写的自由及开放原始码软件[3]，其提供高可用性、负载均衡，以及基于TCP和HTTP的应用程序代理。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>openvpn-auth（支持企业微信认证&amp;LDAP）</title>
    <link href="https://almightyyantao.github.io/2022/12/13/openvpn/openvpn-auth/"/>
    <id>https://almightyyantao.github.io/2022/12/13/openvpn/openvpn-auth/</id>
    <published>2022-12-12T16:00:00.000Z</published>
    <updated>2023-02-20T05:36:08.005Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方案介绍"><a href="#方案介绍" class="headerlink" title="方案介绍"></a>方案介绍</h2><h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><img src="/2022/12/13/openvpn/openvpn-auth/image2022-12-12_20-11-38.png" class="" alt="openvpn-auth 时序图"><span id="more"></span><h2 id="其中有两个地方需要修改"><a href="#其中有两个地方需要修改" class="headerlink" title="其中有两个地方需要修改"></a>其中有两个地方需要修改</h2><ul><li><code>corpid</code>: 企业微信的企业ID</li><li><code>corpsecret</code>: 拥有通讯录的企业微信的Secret</li></ul><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> auth</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/tidwall/gjson&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetAccessToken</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> GetWecomToken()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 从企业微信获取Token</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetWecomToken</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="comment">//创建一个请求</span></span><br><span class="line">req, err := http.NewRequest(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=corpid&amp;corpsecret=corpsecret&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">&quot;NewRquest:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">client := &amp;http.Client&#123;&#125;</span><br><span class="line"><span class="comment">//设置请求头</span></span><br><span class="line">req.Header.Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json; charset=utf-8&quot;</span>)</span><br><span class="line"><span class="comment">//发送请求</span></span><br><span class="line">resp, err := client.Do(req)</span><br><span class="line"><span class="comment">//关闭请求</span></span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">body, err := ioutil.ReadAll(resp.Body)</span><br><span class="line">access_token := gjson.Get(<span class="type">string</span>(body), <span class="string">&quot;access_token&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> access_token.Str</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取员工信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WeComAuth</span><span class="params">(userId <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="comment">//创建一个请求</span></span><br><span class="line">req, err := http.NewRequest(<span class="string">&quot;GET&quot;</span>, <span class="string">`https://qyapi.weixin.qq.com/cgi-bin/user/get?access_token=`</span>+GetAccessToken()+<span class="string">`&amp;userid=`</span>+userId, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">&quot;NewRquest:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">client := &amp;http.Client&#123;&#125;</span><br><span class="line"><span class="comment">//设置请求头</span></span><br><span class="line">req.Header.Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json; charset=utf-8&quot;</span>)</span><br><span class="line"><span class="comment">//发送请求</span></span><br><span class="line">resp, err := client.Do(req)</span><br><span class="line"><span class="comment">//关闭请求</span></span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">body, err := ioutil.ReadAll(resp.Body)</span><br><span class="line">errcode := gjson.Get(<span class="type">string</span>(body), <span class="string">&quot;errcode&quot;</span>)</span><br><span class="line"><span class="type">int</span>, err := strconv.Atoi(errcode.Str)</span><br><span class="line"><span class="keyword">return</span> <span class="type">int</span> == <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>修改<code>/etc/openvpn/server.conf</code>的验证方式，可以吧其他的验证去掉</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth-user-pass-verify /etc/openvpn/openvpn-wecom-password via-file</span><br></pre></td></tr></table></figure><h2 id="加解密方式"><a href="#加解密方式" class="headerlink" title="加解密方式"></a>加解密方式</h2><p>因为用到了客户端传过来的时候的加密方式，因此两边的加密方式必须一致</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> util</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line">basicAES <span class="string">&quot;crypto/aes&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/cipher&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/base64&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">type</span> Aes <span class="keyword">struct</span> &#123;</span><br><span class="line">securityKey []<span class="type">byte</span></span><br><span class="line">iv          []<span class="type">byte</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * constructor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AesTool</span><span class="params">()</span></span> *Aes &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Aes&#123;[]<span class="type">byte</span>(<span class="string">&quot;123&quot;</span>), []<span class="type">byte</span>(<span class="string">&quot;123&quot;</span>)&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加密</span></span><br><span class="line"><span class="comment"> * @param string $plainText 明文</span></span><br><span class="line"><span class="comment"> * @return bool|string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a Aes)</span></span> Encrypt(plainText <span class="type">string</span>) (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">block, err := basicAES.NewCipher(a.securityKey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line">plainTextByte := []<span class="type">byte</span>(plainText)</span><br><span class="line">blockSize := block.BlockSize()</span><br><span class="line">plainTextByte = AddPKCS7Padding(plainTextByte, blockSize)</span><br><span class="line">cipherText := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="built_in">len</span>(plainTextByte))</span><br><span class="line">mode := cipher.NewCBCEncrypter(block, a.iv)</span><br><span class="line">mode.CryptBlocks(cipherText, plainTextByte)</span><br><span class="line"><span class="keyword">return</span> base64.StdEncoding.EncodeToString(cipherText), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解密</span></span><br><span class="line"><span class="comment"> * @param string $cipherText 密文</span></span><br><span class="line"><span class="comment"> * @return bool|string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a Aes)</span></span> Decrypt(cipherText <span class="type">string</span>) (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">block, err := basicAES.NewCipher(a.securityKey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line">cipherDecodeText, decodeErr := base64.StdEncoding.DecodeString(cipherText)</span><br><span class="line"><span class="keyword">if</span> decodeErr != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, decodeErr</span><br><span class="line">&#125;</span><br><span class="line">mode := cipher.NewCBCDecrypter(block, a.iv)</span><br><span class="line">originCipherText := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="built_in">len</span>(cipherDecodeText))</span><br><span class="line">mode.CryptBlocks(originCipherText, cipherDecodeText)</span><br><span class="line">originCipherText = StripPKSC7Padding(originCipherText)</span><br><span class="line"><span class="keyword">return</span> <span class="type">string</span>(originCipherText), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 填充算法</span></span><br><span class="line"><span class="comment"> * @param string $source</span></span><br><span class="line"><span class="comment"> * @return string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddPKCS7Padding</span><span class="params">(ciphertext []<span class="type">byte</span>, blockSize <span class="type">int</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">padding := blockSize - <span class="built_in">len</span>(ciphertext)%blockSize</span><br><span class="line">paddingText := bytes.Repeat([]<span class="type">byte</span>&#123;<span class="type">byte</span>(padding)&#125;, padding)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">append</span>(ciphertext, paddingText...)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移去填充算法</span></span><br><span class="line"><span class="comment"> * @param string $source</span></span><br><span class="line"><span class="comment"> * @return string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StripPKSC7Padding</span><span class="params">(cipherText []<span class="type">byte</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">length := <span class="built_in">len</span>(cipherText)</span><br><span class="line">unpadding := <span class="type">int</span>(cipherText[length<span class="number">-1</span>])</span><br><span class="line"><span class="keyword">return</span> cipherText[:(length - unpadding)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;方案介绍&quot;&gt;&lt;a href=&quot;#方案介绍&quot; class=&quot;headerlink&quot; title=&quot;方案介绍&quot;&gt;&lt;/a&gt;方案介绍&lt;/h2&gt;&lt;h3 id=&quot;时序图&quot;&gt;&lt;a href=&quot;#时序图&quot; class=&quot;headerlink&quot; title=&quot;时序图&quot;&gt;&lt;/a&gt;时序图&lt;/h3&gt;&lt;img src=&quot;/2022/12/13/openvpn/openvpn-auth/image2022-12-12_20-11-38.png&quot; class=&quot;&quot; alt=&quot;openvpn-auth 时序图&quot;&gt;</summary>
    
    
    
    
    <category term="openvpn" scheme="https://almightyyantao.github.io/tags/openvpn/"/>
    
    <category term="openvpn-auth" scheme="https://almightyyantao.github.io/tags/openvpn-auth/"/>
    
    <category term="wecom" scheme="https://almightyyantao.github.io/tags/wecom/"/>
    
    <category term="企业微信" scheme="https://almightyyantao.github.io/tags/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1/"/>
    
    <category term="认证" scheme="https://almightyyantao.github.io/tags/%E8%AE%A4%E8%AF%81/"/>
    
    <category term="ldap" scheme="https://almightyyantao.github.io/tags/ldap/"/>
    
  </entry>
  
</feed>
